{"ast":null,"code":"import { createSlice } from '@reduxjs/toolkit';\n\n// fetch the orders to update createAsyncThunk, ?\n\n// Declaring the initial state to define the structure\nvar initialState = {\n  // actually, get initial state from the database\n  activeOrders: 0,\n  activeInvoices: 0,\n  ordersPlaced: 0,\n  ordersProcessed: 0,\n  ordersShipped: 0,\n  missingInvoices: 0,\n  unpaidInvoices: 0\n\n  // here, for the purposes of this as a state, do i need to have inactiveOrders??\n  // should i use a flag in the order slice to use the counters\n  // or keep this slice\n};\n\n// Creating a slice of the quickstats data defines the state and actions on that data\nexport var quickStats = createSlice({\n  name: 'quickstats',\n  initialState: initialState,\n  reducers: {\n\n    //INSTEAD WE JUST FETCH FROM THE DB\n    // // Called by order -- iif(currentOrder.status === 'PLACED')\n    // addActiveOrder: (data) => {\n    // \tdata.activeOrders += 1;\n    // },\n    // // or should subActiveOrder be set inactive?\n    // subActiveOrder: (data) => {\n    // \tdata.activeOrders -= 1;\n    // },\n\n    // // Called by order -- if !order.invoice.isPaid\n    // addActiveInvoice: (data) => {\n    // \tdata.activeInvoices += 1;\n    // },\n    // // or should subActiveInvoice be +1 inactive invoice?\n    // subActiveInvoice: (data) => {\n    // \tdata.activeInvoices -= 1;\n    // },\n\n    // // Called by order -- if(currentOrder.status === 'PLACED')\n    // addOrderPlaced: (data) => {\n    // \tdata.ordersPlaced += 1;\n    // },\n    // subOrderPlaced: (data) => {\n    // \tdata.ordersPlaced -= 1;\n    // },\n\n    // // Called by order -- if !order.invoice.isPaid\n    // addOrderProcessed: (data) => {\n    // \tdata.ordersProcessed += 1;\n    // },\n    // subOrderProcessed: (data) => {\n    // \tdata.ordersProcessed -= 1;\n    // },\n\n    // // Called by order -- if !order.invoice.isPaid\n    // addOrderShipped: (data) => {\n    // \tdata.ordersShipped += 1;\n    // },\n    // subOrderShipped: (data) => {\n    // \tdata.ordersShipped -= 1;\n    // },\n\n    // // Called by order -- if order.invoice === null\n    // addMissingInvoice: (data) => {\n    // \tdata.missingInvoices += 1;\n    // },\n    // subMissingInvoice: (data) => {\n    // \tdata.missingInvoices -= 1;\n    // },\n\n    // // Called by order -- if !order.invoice.isPaid\n    // addUnpaidInvoice: (data) => {\n    // \tdata.unpaidInvoices += 1;\n    // },\n    // subUnpaidInvoice: (data) => {\n    // \tdata.unpaidInvoices -= 1;\n    // },\n  }\n});\n\n// exporting the actions that can be called elsewhere\n// export const { increment, decrement, incrementByAmount } = quickStats.actions;\n\n// This is how we get the value from the store.\nexport var selectActiveOrders = function selectActiveOrders(state) {\n  return state.quickstats.activeOrders;\n}; // Get active orders\nexport var selectActiveInvoices = function selectActiveInvoices(state) {\n  return state.quickstats.activeInvoices;\n}; // Active invoices\nexport var selectOrdersPlaced = function selectOrdersPlaced(state) {\n  return state.quickstats.ordersPlaced;\n}; // Get orders placed\nexport var selectOrdersProcessed = function selectOrdersProcessed(state) {\n  return state.quickstats.ordersProcessed;\n}; // Get orders processed\nexport var selectOrdersShipped = function selectOrdersShipped(state) {\n  return state.quickstats.ordersShipped;\n}; // Get orders shipped\nexport var selectMissingInvoices = function selectMissingInvoices(state) {\n  return state.quickstats.missingInvoices;\n}; // Get missing invoices\nexport var selectUnpaidInvoices = function selectUnpaidInvoices(state) {\n  return state.quickstats.unpaidInvoices;\n}; // Get unpaid invoices\n\n// Exporting the reducer to be configured in ./store.js\nexport default quickStats.reducer;\n\n// const getQuickStatsData = () => {\n//where API code could go\n// \tvar data = {\n// \t\tactiveOrders: 0,\n// \t\tactiveInvoices: 0,\n// \t\tordersPlaced: 0,\n// \t\tordersProcessed: 0,\n// \t\tordersShipped: 0,\n// \t\tmissingInvoices: 0,\n// \t\tunpaidInvoices: 0,\n// \t}\n\n// \tfor(var i = 0; i < orders.length; i++){\n// \t\tvar currentOrder = orders[i];\n// \t\tif(currentOrder.status === 'PLACED'){\n// \t\t\tdata.ordersPlaced++\n// \t\t\tdata.activeOrders++\n\n// \t\t} else if(currentOrder.status === 'PROCESSED'){\n// \t\t\tdata.ordersProcessed++\n// \t\t\tdata.activeOrders++\n\n// \t\t} else if(currentOrder.status === 'SHIPPED'){\n// \t\t\tdata.ordersShipped++\n// \t\t\tdata.activeOrders++\n// \t\t} \n\n// \t\tif(currentOrder.invoice === null){\n// \t\t\tdata.missingInvoices++\n\n// \t\t} else if(!currentOrder.invoice.isPaid){\n// \t\t\tdata.unpaidInvoices++\n\n// \t\t}\n// \t}\n\n// \treturn data\n// }","map":{"version":3,"names":["createSlice","initialState","activeOrders","activeInvoices","ordersPlaced","ordersProcessed","ordersShipped","missingInvoices","unpaidInvoices","quickStats","name","reducers","selectActiveOrders","state","quickstats","selectActiveInvoices","selectOrdersPlaced","selectOrdersProcessed","selectOrdersShipped","selectMissingInvoices","selectUnpaidInvoices","reducer"],"sources":["/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/src/store/stats_slice.js"],"sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\n\n\n// fetch the orders to update createAsyncThunk, ?\n\n// Declaring the initial state to define the structure\nconst initialState = {\n  // actually, get initial state from the database\n  activeOrders: 0,\n  activeInvoices: 0,\n  ordersPlaced: 0,\n  ordersProcessed: 0,\n  ordersShipped: 0,\n  missingInvoices: 0,\n  unpaidInvoices: 0,\n\n  // here, for the purposes of this as a state, do i need to have inactiveOrders??\n  // should i use a flag in the order slice to use the counters\n  // or keep this slice\n\n};\n\n// Creating a slice of the quickstats data defines the state and actions on that data\nexport const quickStats = createSlice({\n  name: 'quickstats',\n  initialState,\n  reducers: {\n\n\t//INSTEAD WE JUST FETCH FROM THE DB\n\t// // Called by order -- iif(currentOrder.status === 'PLACED')\n\t// addActiveOrder: (data) => {\n\t// \tdata.activeOrders += 1;\n\t// },\n\t// // or should subActiveOrder be set inactive?\n\t// subActiveOrder: (data) => {\n\t// \tdata.activeOrders -= 1;\n\t// },\n\n\t// // Called by order -- if !order.invoice.isPaid\n\t// addActiveInvoice: (data) => {\n\t// \tdata.activeInvoices += 1;\n\t// },\n\t// // or should subActiveInvoice be +1 inactive invoice?\n\t// subActiveInvoice: (data) => {\n\t// \tdata.activeInvoices -= 1;\n\t// },\n\n\t// // Called by order -- if(currentOrder.status === 'PLACED')\n\t// addOrderPlaced: (data) => {\n\t// \tdata.ordersPlaced += 1;\n\t// },\n\t// subOrderPlaced: (data) => {\n\t// \tdata.ordersPlaced -= 1;\n\t// },\n\n\t// // Called by order -- if !order.invoice.isPaid\n\t// addOrderProcessed: (data) => {\n\t// \tdata.ordersProcessed += 1;\n\t// },\n\t// subOrderProcessed: (data) => {\n\t// \tdata.ordersProcessed -= 1;\n\t// },\n\t\n\t// // Called by order -- if !order.invoice.isPaid\n\t// addOrderShipped: (data) => {\n\t// \tdata.ordersShipped += 1;\n\t// },\n\t// subOrderShipped: (data) => {\n\t// \tdata.ordersShipped -= 1;\n\t// },\n\n\t// // Called by order -- if order.invoice === null\n\t// addMissingInvoice: (data) => {\n\t// \tdata.missingInvoices += 1;\n\t// },\n\t// subMissingInvoice: (data) => {\n\t// \tdata.missingInvoices -= 1;\n\t// },\n\n\t// // Called by order -- if !order.invoice.isPaid\n\t// addUnpaidInvoice: (data) => {\n\t// \tdata.unpaidInvoices += 1;\n\t// },\n\t// subUnpaidInvoice: (data) => {\n\t// \tdata.unpaidInvoices -= 1;\n\t// },\n  },\n});\n\n// exporting the actions that can be called elsewhere\n// export const { increment, decrement, incrementByAmount } = quickStats.actions;\n\n// This is how we get the value from the store.\nexport const selectActiveOrders = (state) => state.quickstats.activeOrders; \t\t// Get active orders\nexport const selectActiveInvoices = (state) => state.quickstats.activeInvoices;\t\t// Active invoices\nexport const selectOrdersPlaced = (state) => state.quickstats.ordersPlaced;\t\t\t// Get orders placed\nexport const selectOrdersProcessed = (state) => state.quickstats.ordersProcessed;\t// Get orders processed\nexport const selectOrdersShipped = (state) => state.quickstats.ordersShipped;\t\t// Get orders shipped\nexport const selectMissingInvoices = (state) => state.quickstats.missingInvoices;\t// Get missing invoices\nexport const selectUnpaidInvoices = (state) => state.quickstats.unpaidInvoices;\t\t// Get unpaid invoices\n\n\n// Exporting the reducer to be configured in ./store.js\nexport default quickStats.reducer;\n\n// const getQuickStatsData = () => {\n\t\t//where API code could go\n\t// \tvar data = {\n\t// \t\tactiveOrders: 0,\n\t// \t\tactiveInvoices: 0,\n\t// \t\tordersPlaced: 0,\n\t// \t\tordersProcessed: 0,\n\t// \t\tordersShipped: 0,\n\t// \t\tmissingInvoices: 0,\n\t// \t\tunpaidInvoices: 0,\n\t// \t}\n\n\t// \tfor(var i = 0; i < orders.length; i++){\n\t// \t\tvar currentOrder = orders[i];\n\t// \t\tif(currentOrder.status === 'PLACED'){\n\t// \t\t\tdata.ordersPlaced++\n\t// \t\t\tdata.activeOrders++\n\n\t// \t\t} else if(currentOrder.status === 'PROCESSED'){\n\t// \t\t\tdata.ordersProcessed++\n\t// \t\t\tdata.activeOrders++\n\n\t// \t\t} else if(currentOrder.status === 'SHIPPED'){\n\t// \t\t\tdata.ordersShipped++\n\t// \t\t\tdata.activeOrders++\n\t// \t\t} \n\n\t// \t\tif(currentOrder.invoice === null){\n\t// \t\t\tdata.missingInvoices++\n\n\t// \t\t} else if(!currentOrder.invoice.isPaid){\n\t// \t\t\tdata.unpaidInvoices++\n\t\t\t\t\t\n\t// \t\t}\n\t// \t}\n\n\t// \treturn data\n\t// }\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,kBAAkB;;AAG9C;;AAEA;AACA,IAAMC,YAAY,GAAG;EACnB;EACAC,YAAY,EAAE,CAAC;EACfC,cAAc,EAAE,CAAC;EACjBC,YAAY,EAAE,CAAC;EACfC,eAAe,EAAE,CAAC;EAClBC,aAAa,EAAE,CAAC;EAChBC,eAAe,EAAE,CAAC;EAClBC,cAAc,EAAE;;EAEhB;EACA;EACA;AAEF,CAAC;;AAED;AACA,OAAO,IAAMC,UAAU,GAAGT,WAAW,CAAC;EACpCU,IAAI,EAAE,YAAY;EAClBT,YAAY,EAAZA,YAAY;EACZU,QAAQ,EAAE;;IAEX;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;EAAA;AAED,CAAC,CAAC;;AAEF;AACA;;AAEA;AACA,OAAO,IAAMC,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIC,KAAK;EAAA,OAAKA,KAAK,CAACC,UAAU,CAACZ,YAAY;AAAA,EAAC,CAAG;AAC9E,OAAO,IAAMa,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAIF,KAAK;EAAA,OAAKA,KAAK,CAACC,UAAU,CAACX,cAAc;AAAA,EAAC,CAAE;AACjF,OAAO,IAAMa,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIH,KAAK;EAAA,OAAKA,KAAK,CAACC,UAAU,CAACV,YAAY;AAAA,EAAC,CAAG;AAC9E,OAAO,IAAMa,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAIJ,KAAK;EAAA,OAAKA,KAAK,CAACC,UAAU,CAACT,eAAe;AAAA,EAAC,CAAC;AAClF,OAAO,IAAMa,mBAAmB,GAAG,SAAtBA,mBAAmB,CAAIL,KAAK;EAAA,OAAKA,KAAK,CAACC,UAAU,CAACR,aAAa;AAAA,EAAC,CAAE;AAC/E,OAAO,IAAMa,qBAAqB,GAAG,SAAxBA,qBAAqB,CAAIN,KAAK;EAAA,OAAKA,KAAK,CAACC,UAAU,CAACP,eAAe;AAAA,EAAC,CAAC;AAClF,OAAO,IAAMa,oBAAoB,GAAG,SAAvBA,oBAAoB,CAAIP,KAAK;EAAA,OAAKA,KAAK,CAACC,UAAU,CAACN,cAAc;AAAA,EAAC,CAAE;;AAGjF;AACA,eAAeC,UAAU,CAACY,OAAO;;AAEjC;AACE;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA"},"metadata":{},"sourceType":"module"}