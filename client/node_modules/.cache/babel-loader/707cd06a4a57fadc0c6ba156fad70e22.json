{"ast":null,"code":"import _toConsumableArray from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/src/views/orders/MainOrderView_Tabs.js\";\nimport cross_red from \"../../assets/img/close_red.svg\";\nimport cross_white from \"../../assets/img/close_white.svg\";\nimport add_icon from \"../../assets/img/plus_white.svg\";\nimport React, { useState } from 'react';\nimport { createOrder, retrieveOrders } from '../../store/order_slice';\nimport OrdersListTEST from './Tab_CompletedOrders';\nimport Order from './Tab_ExistingOrder';\nimport OrderAddNew, { AddOrder } from './Tab_NewOrder';\nimport { ActiveOrders, CompletedOrders } from './Tab_ActiveOrders';\nexport var TabTypeOrder = {\n  ACTIVE: 1,\n  INACTIVE: 2\n};\nvar ViewType = {\n  ACTIVE_ORDERS: 1,\n  COMPLETED_ORDERS: 2,\n  EXISTING_ORDER: 3,\n  NEW_ORDER: 4\n};\nexport var TabButton = function TabButton(_ref) {\n  var id = _ref.id,\n    text = _ref.text,\n    tabType = _ref.tabType,\n    viewType = _ref.viewType,\n    _onClick = _ref.onClick,\n    onDelete = _ref.onDelete;\n  if (tabType === TabTypeOrder.ACTIVE) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tabRowButtonActive\",\n      onClick: function onClick() {\n        return _onClick(id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 5\n      }\n    }, text), viewType === ViewType.ORDER_VIEW && /*#__PURE__*/React.createElement(\"img\", {\n      src: cross_white,\n      style: {\n        paddingLeft: '10px'\n      },\n      onClick: function onClick(event) {\n        return onDelete(id, event);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 42\n      }\n    }));\n  } else if (tabType === TabTypeOrder.INACTIVE) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"tabRowButton\",\n      onClick: function onClick() {\n        return _onClick(id);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 4\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      style: {\n        fontWeight: 'bold'\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, text), viewType === ViewType.ORDER_VIEW && /*#__PURE__*/React.createElement(\"img\", {\n      src: cross_red,\n      style: {\n        paddingLeft: '10px'\n      },\n      onClick: function onClick(event) {\n        return onDelete(id, event);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 42\n      }\n    }));\n  }\n};\n\n/**\n * \n * @returns OrderList\n */\nvar MainOrderPane = function MainOrderPane() {\n  // Get the orders from the store\n  var orders = retrieveOrders;\n\n  // Set the text\n  var _useState = useState(\"Orders\"),\n    _useState2 = _slicedToArray(_useState, 2),\n    displayText = _useState2[0],\n    setDisplayText = _useState2[1];\n  var _useState3 = useState(3),\n    _useState4 = _slicedToArray(_useState3, 2),\n    nextId = _useState4[0],\n    setNextId = _useState4[1];\n  var _useState5 = useState(1),\n    _useState6 = _slicedToArray(_useState5, 2),\n    activeTabId = _useState6[0],\n    setActiveTabId = _useState6[1]; // Static tabs Active/Complete\n  var _useState7 = useState([{\n      id: 1,\n      text: 'Active Orders',\n      tabType: TabTypeOrder.ACTIVE,\n      viewType: ViewType.ACTIVE_ORDERS\n    }, {\n      id: 2,\n      text: 'Completed Orders',\n      tabType: TabTypeOrder.INACTIVE,\n      viewType: ViewType.COMPLETED_ORDERS\n    }]),\n    _useState8 = _slicedToArray(_useState7, 2),\n    tabs = _useState8[0],\n    setTabs = _useState8[1]; // Add/open new tab for READ ONLY ORDER VIEW\n  function addAndOpenOrderView(order) {\n    var tab = tabs.find(function (tab) {\n      return tab.viewType === ViewType.EXISTING_ORDER && order.id === tab.order.id;\n    });\n    if (tab === undefined) {\n      var newTab = {\n        id: {\n          nextId: nextId\n        },\n        text: order.customer.lastName,\n        tabType: TabTypeOrder.ACTIVE,\n        viewType: ViewType.EXISTING_ORDER,\n        order: order\n      };\n      var currentActiveTab = tabs.find(function (tab) {\n        return tab.id === activeTabId;\n      });\n      currentActiveTab.tabType = TabTypeOrder.INACTIVE;\n      var newTabsList = tabs.slice();\n      setTabs([].concat(_toConsumableArray(newTabsList), [newTab]));\n      setActiveTabId(newTab.id);\n      setNextId(nextId + 1);\n    } else {\n      setActiveTab(tab.id);\n    }\n  }\n\n  // Add new tab for ADD ORDER\n  function addNewOrder() {\n    var newTab = {\n      id: {\n        nextId: nextId\n      },\n      text: \"New Order\",\n      tabType: TabTypeOrder.ACTIVE,\n      viewType: ViewType.NEW_ORDER,\n      order: {\n        // or should i pass in an order?\n      }\n    };\n    var currentActiveTab = tabs.find(function (tab) {\n      return tab.id === activeTabId;\n    });\n    currentActiveTab.tabType = TabTypeOrder.INACTIVE;\n    var newTabsList = tabs.slice();\n    setTabs([].concat(_toConsumableArray(newTabsList), [newTab]));\n    setActiveTabId(newTab.id);\n    setNextId(nextId + 1);\n  }\n\n  // Remove tab from bar\n  function removeOrderView(id, event) {\n    if (activeTabId === id) {\n      var newActiveTab = tabs[tabs.length - 2];\n      newActiveTab.tabType = TabTypeOrder.ACTIVE;\n      var newTabsList = tabs.slice().filter(function (tab) {\n        return tab.id !== id;\n      });\n      setTabs(newTabsList);\n      setActiveTabId(newActiveTab.id);\n    } else {\n      setTabs(tabs.filter(function (tab) {\n        return tab.id !== id;\n      }));\n    }\n    {/*So that the tab does not click when the close button is clicked*/}\n    event.stopPropagation();\n  }\n\n  // Set active tab - pass in id\n  function setActiveTab(id) {\n    var currentActiveTab = tabs.find(function (tab) {\n      return tab.id === activeTabId;\n    });\n    var newActiveTab = tabs.find(function (tab) {\n      return tab.id === id;\n    });\n    currentActiveTab.tabType = TabTypeOrder.INACTIVE;\n    newActiveTab.tabType = TabTypeOrder.ACTIVE;\n    var newTabsList = tabs.slice();\n    setTabs(newTabsList);\n    setActiveTabId(newActiveTab.id);\n  }\n  var displayContent;\n  var activeContent = tabs.find(function (tab) {\n    return tab.id === activeTabId;\n  });\n  switch (activeContent.viewType) {\n    case ViewType.ACTIVE_ORDERS:\n      displayContent = /*#__PURE__*/React.createElement(ActiveOrders, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }\n      });\n      break;\n    case ViewType.COMPLETED_ORDERS:\n      displayContent = /*#__PURE__*/React.createElement(CompletedOrders, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }\n      });\n      break;\n    case ViewType.EXISTING_ORDER:\n      displayContent = /*#__PURE__*/React.createElement(Order, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }\n      });\n      break;\n    case ViewType.NEW_ORDER:\n      displayContent = /*#__PURE__*/React.createElement(OrderAddNew, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 21\n        }\n      });\n      break;\n  }\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"Orders\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"OrderTitleButton\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"PageHeader\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 5\n    }\n  }, displayText), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"OrderActionButton\",\n    onClick: addNewOrder,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: add_icon,\n    alt: \"add order\",\n    style: {\n      paddingRight: '10px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 6\n    }\n  }, \"Add Order\"))), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"OrdersDisplay\",\n    style: {\n      display: 'flex',\n      displayDirection: 'column'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 174,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"tabRow\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 5\n    }\n  }, tabs.map(function (tab) {\n    return /*#__PURE__*/React.createElement(TabButton, {\n      key: tab.id,\n      id: tab.id,\n      text: tab.text,\n      tabType: tab.tabType,\n      viewType: tab.viewType,\n      onClick: setActiveTab,\n      onDelete: removeOrderView,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 7\n      }\n    });\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    id: \"rectangle\",\n    style: {\n      height: '13px',\n      width: '1144px',\n      backgroundColor: '#C62032'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 5\n    }\n  }), /*#__PURE__*/React.createElement(OrdersListTEST, {\n    displayContent: displayContent,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  })));\n};\nexport default MainOrderPane;\n\n// import cross_red from '../../assets/img/close_red.svg'\n// import cross_white from '../../assets/img/close_white.svg'\n// import add_icon from '../../assets/img/plus_white.svg'\n// import React, {Component, useState} from 'react';\n// import { createOrder, } from '../../store/order_slice'\n// import { connect } from \"react-redux\";\n\n// export const TabTypeOrder = {\n// \tACTIVE: 1,\n// \tINACTIVE: 2,\n// }\n\n// const ViewType = {\n// \tACTIVE_ORDERS: 1,\n// \tCOMPLETED_ORDERS: 2,\n// \tORDER: 3,\n// \tADD_ORDER: 4\n// }\n\n// export const TabButton = ({id, text, tabType, viewType, onClick, onDelete}) => {\n// \tif(tabType === TabTypeOrder.ACTIVE){\n// \t\treturn(\n// \t\t\t<div className='tabRowButtonActive' onClick={() => onClick(id)}>\n// \t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\n// \t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_white} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\n// \t\t\t</div>\n// \t\t)\n// \t} else if(tabType === TabTypeOrder.INACTIVE){\n// \t\treturn(\n// \t\t\t<div className='tabRowButton' onClick={() => onClick(id)}>\n// \t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\n// \t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_red} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\n// \t\t\t</div>\n// \t\t)\n// \t}\n// }\n\n// const [displayText, setDisplayText] = useState(\"Orders\");\n// const [nextId, setNextId] = useState(3)\n// const [activeTabId, setActiveTabId] = useState(1)\n\n// // Static tabs Active/Complete\n// const [tabs, setTabs] = useState([\n//     {\n//         id: 1,\n//         text: 'Active Orders',\n//         tabType: TabTypeOrder.ACTIVE,\n//         viewType: ViewType.ACTIVE_ORDERS,\n//     },\n//     {\n//         id: 2,\n//         text: 'Completed Orders',\n//         tabType: TabTypeOrder.INACTIVE,\n//         viewType: ViewType.COMPLETED_ORDERS,\n//     },\n// ])\n\n// \t// Add/open new tab for READ ONLY ORDER VIEW\n// \tfunction addAndOpenOrderView(order){\n// \t\tconst tab = tabs.find(tab => (tab.viewType === ViewType.ORDER && order.id === tab.order.id))\n// \t\tif(tab === undefined){\n// \t\t\tconst newTab = {\n// \t\t\t\tid: {nextId},\n// \t\t\t\ttext: order.customer.lastName,\n// \t\t\t\ttabType: TabTypeOrder.ACTIVE,\n// \t\t\t\tviewType: ViewType.ORDER,\n// \t\t\t\torder: order,\n// \t\t\t}\n\n// \t\t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n// \t\t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\n// \t\t\tconst newTabsList = tabs.slice()\n// \t\t\tsetTabs([...newTabsList, newTab])\n// \t\t\tsetActiveTabId(newTab.id)\n// \t\t\tsetNextId(nextId + 1)\n\n// \t\t} else{\n// \t\t\tsetActiveTab(tab.id)\n// \t\t}\n// \t}\n\n// \t// Add new tab for ADD ORDER\n// \tfunction addNewOrder() {\n// \t\tconst newTab = {\n// \t\t\tid: {nextId},\n// \t\t\ttext: \"New Order\",\n// \t\t\ttabType: TabTypeOrder.ACTIVE,\n// \t\t\tviewType: ViewType.ADD_ORDER,\n// \t\t\torder: {\n// \t\t\t\t// or should i pass in an order?\n// \t\t\t},\n// \t\t}\n// \t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n// \t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\n// \t\tconst newTabsList = tabs.slice()\n// \t\tsetTabs([...newTabsList, newTab])\n// \t\tsetActiveTabId(newTab.id)\n// \t\tsetNextId(nextId + 1)\n// \t}\n\n// \t// Remove tab from bar\n// \tfunction removeOrderView(id, event){\n// \t\tif(activeTabId === id){\n// \t\t\tconst newActiveTab = tabs[tabs.length-2]\n// \t\t\tnewActiveTab.tabType = TabTypeOrder.ACTIVE\n// \t\t\tconst newTabsList = tabs.slice().filter(tab => tab.id !== id)\n// \t\t\tsetTabs(newTabsList)\n// \t\t\tsetActiveTabId(newActiveTab.id)\n\n// \t\t} else{\n// \t\t\tsetTabs(tabs.filter(tab => tab.id !== id))\n// \t\t}\n\n// \t\t{/*So that the tab does not click when the close button is clicked*/}\n// \t\tevent.stopPropagation()\n// \t}\n\n// \t// Set active tab - pass in id\n// \tfunction setActiveTab(id){\n// \t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n// \t\tconst newActiveTab = tabs.find(tab => tab.id === id)\n// \t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\n// \t\tnewActiveTab.tabType = TabTypeOrder.ACTIVE\n// \t\tconst newTabsList = tabs.slice()\n// \t\tsetTabs(newTabsList)\n// \t\tsetActiveTabId(newActiveTab.id)\n// \t}\n\n// class MainOrderView extends Component {\n\n//     render() {\n//         return (\n//             <div id='Orders'>\t\n// \t\t\t\t<div className=\"OrderTitleButton\">\n// \t\t\t\t\t<h1 className='PageHeader'>{'Orders'}</h1> \n// \t\t\t\t\t<button className='OrderActionButton' onClick={createOrder}>\n// \t\t\t\t\t\t<img src={add_icon} alt='add order' style={{paddingRight: '10px'}}/>\n// \t\t\t\t\t\t<h4>Add Order</h4>\n// \t\t\t\t\t</button>\n// \t\t\t\t</div>\n// \t\t\t\t<div id='OrdersDisplay' style={{display: 'flex', displayDirection: 'column'}}>\n// \t\t\t\t\t{/* here we can call the tab component */}\n// \t\t\t\t\t<div className='tabRow'>\n// \t\t\t\t\t\t{tabs.map((tab) => (\n// \t\t\t\t\t\t\t<TabButton key={tab.id} id={tab.id} text={tab.text} tabType={tab.tabType} viewType={tab.viewType} onClick={setActiveTab} onDelete={removeOrderView}/>\n// \t\t\t\t\t\t))}\n// \t\t\t\t\t</div>\n\n// \t\t\t\t\t<div id='rectangle' style={{height: '13px', width: '1144px', backgroundColor: '#C62032'}} />\n// \t\t\t\t\t<OrdersListTEST displayContent={displayContent}/>\n// \t\t\t\t</div>\n// \t\t\t</div>\n//           );\n//     }\n\n// }\n\n// export default MainOrderView;","map":{"version":3,"names":["React","useState","createOrder","retrieveOrders","OrdersListTEST","Order","OrderAddNew","AddOrder","ActiveOrders","CompletedOrders","TabTypeOrder","ACTIVE","INACTIVE","ViewType","ACTIVE_ORDERS","COMPLETED_ORDERS","EXISTING_ORDER","NEW_ORDER","TabButton","id","text","tabType","viewType","onClick","onDelete","fontWeight","ORDER_VIEW","cross_white","paddingLeft","event","cross_red","MainOrderPane","orders","displayText","setDisplayText","nextId","setNextId","activeTabId","setActiveTabId","tabs","setTabs","addAndOpenOrderView","order","tab","find","undefined","newTab","customer","lastName","currentActiveTab","newTabsList","slice","setActiveTab","addNewOrder","removeOrderView","newActiveTab","length","filter","stopPropagation","displayContent","activeContent","add_icon","paddingRight","display","displayDirection","map","height","width","backgroundColor"],"sources":["/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/src/views/orders/MainOrderView_Tabs.js"],"sourcesContent":["import cross_red from '../../assets/img/close_red.svg'\nimport cross_white from '../../assets/img/close_white.svg'\nimport add_icon from '../../assets/img/plus_white.svg'\nimport React, { useState } from 'react'\n\nimport { createOrder, retrieveOrders } from '../../store/order_slice'\nimport OrdersListTEST from './Tab_CompletedOrders';\n\nimport Order from './Tab_ExistingOrder';\nimport OrderAddNew, { AddOrder } from './Tab_NewOrder';\nimport { ActiveOrders, CompletedOrders, } from './Tab_ActiveOrders'\n\nexport const TabTypeOrder = {\n\tACTIVE: 1,\n\tINACTIVE: 2,\n}\n\nconst ViewType = {\n\tACTIVE_ORDERS: 1,\n\tCOMPLETED_ORDERS: 2,\n\tEXISTING_ORDER: 3,\n\tNEW_ORDER: 4\n}\n\n\nexport const TabButton = ({id, text, tabType, viewType, onClick, onDelete}) => {\n\tif(tabType === TabTypeOrder.ACTIVE){\n\t\treturn(\n\t\t\t<div className='tabRowButtonActive' onClick={() => onClick(id)}>\n\t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\n\t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_white} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\n\t\t\t</div>\n\t\t)\n\t} else if(tabType === TabTypeOrder.INACTIVE){\n\t\treturn(\n\t\t\t<div className='tabRowButton' onClick={() => onClick(id)}>\n\t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\n\t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_red} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\n\t\t\t</div>\n\t\t)\n\t}\n}\n\n\n/**\n * \n * @returns OrderList\n */\nconst MainOrderPane = () => {\n\t\n\t// Get the orders from the store\n\tvar orders = retrieveOrders;\n\n\t// Set the text\n\tconst [displayText, setDisplayText] = useState(\"Orders\")\n\tconst [nextId, setNextId] = useState(3)\n\tconst [activeTabId, setActiveTabId] = useState(1)\n\n\t// Static tabs Active/Complete\n\tconst [tabs, setTabs] = useState([\n\t\t{\n\t\t\tid: 1,\n\t\t\ttext: 'Active Orders',\n\t\t\ttabType: TabTypeOrder.ACTIVE,\n\t\t\tviewType: ViewType.ACTIVE_ORDERS,\n\t\t},\n\t\t{\n\t\t\tid: 2,\n\t\t\ttext: 'Completed Orders',\n\t\t\ttabType: TabTypeOrder.INACTIVE,\n\t\t\tviewType: ViewType.COMPLETED_ORDERS,\n\t\t},\n\t])\n\n\t// Add/open new tab for READ ONLY ORDER VIEW\n\tfunction addAndOpenOrderView(order){\n\t\tconst tab = tabs.find(tab => (tab.viewType === ViewType.EXISTING_ORDER && order.id === tab.order.id))\n\t\tif(tab === undefined){\n\t\t\tconst newTab = {\n\t\t\t\tid: {nextId},\n\t\t\t\ttext: order.customer.lastName,\n\t\t\t\ttabType: TabTypeOrder.ACTIVE,\n\t\t\t\tviewType: ViewType.EXISTING_ORDER,\n\t\t\t\torder: order,\n\t\t\t}\n\n\t\t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n\t\t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\n\t\t\tconst newTabsList = tabs.slice()\n\t\t\tsetTabs([...newTabsList, newTab])\n\t\t\tsetActiveTabId(newTab.id)\n\t\t\tsetNextId(nextId + 1)\n\n\t\t} else{\n\t\t\tsetActiveTab(tab.id)\n\t\t}\n\t}\n\n\t// Add new tab for ADD ORDER\n\tfunction addNewOrder() {\n\t\tconst newTab = {\n\t\t\tid: {nextId},\n\t\t\ttext: \"New Order\",\n\t\t\ttabType: TabTypeOrder.ACTIVE,\n\t\t\tviewType: ViewType.NEW_ORDER,\n\t\t\torder: {\n\t\t\t\t// or should i pass in an order?\n\t\t\t},\n\t\t}\n\t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n\t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\n\t\tconst newTabsList = tabs.slice()\n\t\tsetTabs([...newTabsList, newTab])\n\t\tsetActiveTabId(newTab.id)\n\t\tsetNextId(nextId + 1)\n\t}\n\n\t// Remove tab from bar\n\tfunction removeOrderView(id, event){\n\t\tif(activeTabId === id){\n\t\t\tconst newActiveTab = tabs[tabs.length-2]\n\t\t\tnewActiveTab.tabType = TabTypeOrder.ACTIVE\n\t\t\tconst newTabsList = tabs.slice().filter(tab => tab.id !== id)\n\t\t\tsetTabs(newTabsList)\n\t\t\tsetActiveTabId(newActiveTab.id)\n\n\t\t} else{\n\t\t\tsetTabs(tabs.filter(tab => tab.id !== id))\n\t\t}\n\n\t\t{/*So that the tab does not click when the close button is clicked*/}\n\t\tevent.stopPropagation()\n\t}\n\n\t// Set active tab - pass in id\n\tfunction setActiveTab(id){\n\t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n\t\tconst newActiveTab = tabs.find(tab => tab.id === id)\n\t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\n\t\tnewActiveTab.tabType = TabTypeOrder.ACTIVE\n\t\tconst newTabsList = tabs.slice()\n\t\tsetTabs(newTabsList)\n\t\tsetActiveTabId(newActiveTab.id)\n\t}\n\n\tlet displayContent\n\tconst activeContent = tabs.find(tab => tab.id === activeTabId)\n\n\tswitch(activeContent.viewType){\n\t\tcase ViewType.ACTIVE_ORDERS:\n\t\t\tdisplayContent = <ActiveOrders/>\n\t\t\tbreak\n\t\tcase ViewType.COMPLETED_ORDERS:\n\t\t\tdisplayContent = <CompletedOrders/>\n\t\t\tbreak\n\t\tcase ViewType.EXISTING_ORDER:\n\t\t\tdisplayContent = <Order/>\n\t\t\tbreak\n\t\tcase ViewType.NEW_ORDER:\n\t\t\tdisplayContent = <OrderAddNew/>\n\t\t\tbreak\n\t}\n\n\n\treturn(\n\t\t<div id='Orders'>\t\n\t\t\t<div className=\"OrderTitleButton\">\n\t\t\t\t<h1 className='PageHeader'>{displayText}</h1> \n\t\t\t\t<button className='OrderActionButton' onClick={addNewOrder}>\n\t\t\t\t\t<img src={add_icon} alt='add order' style={{paddingRight: '10px'}}/>\n\t\t\t\t\t<h4>Add Order</h4>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div id='OrdersDisplay' style={{display: 'flex', displayDirection: 'column'}}>\n\t\t\t\t<div className='tabRow'>\n\t\t\t\t\t{tabs.map((tab) => (\n\t\t\t\t\t\t<TabButton key={tab.id} id={tab.id} text={tab.text} tabType={tab.tabType} viewType={tab.viewType} onClick={setActiveTab} onDelete={removeOrderView}/>\n\t\t\t\t\t))}\n\t\t\t\t</div>\n\t\t\t\t<div id='rectangle' style={{height: '13px', width: '1144px', backgroundColor: '#C62032'}} />\n\t\t\t\t<OrdersListTEST displayContent={displayContent}/>\n\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\nexport default MainOrderPane;\n\n// import cross_red from '../../assets/img/close_red.svg'\n// import cross_white from '../../assets/img/close_white.svg'\n// import add_icon from '../../assets/img/plus_white.svg'\n// import React, {Component, useState} from 'react';\n// import { createOrder, } from '../../store/order_slice'\n// import { connect } from \"react-redux\";\n\n\n// export const TabTypeOrder = {\n// \tACTIVE: 1,\n// \tINACTIVE: 2,\n// }\n\n// const ViewType = {\n// \tACTIVE_ORDERS: 1,\n// \tCOMPLETED_ORDERS: 2,\n// \tORDER: 3,\n// \tADD_ORDER: 4\n// }\n\n\n// export const TabButton = ({id, text, tabType, viewType, onClick, onDelete}) => {\n// \tif(tabType === TabTypeOrder.ACTIVE){\n// \t\treturn(\n// \t\t\t<div className='tabRowButtonActive' onClick={() => onClick(id)}>\n// \t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\n// \t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_white} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\n// \t\t\t</div>\n// \t\t)\n// \t} else if(tabType === TabTypeOrder.INACTIVE){\n// \t\treturn(\n// \t\t\t<div className='tabRowButton' onClick={() => onClick(id)}>\n// \t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\n// \t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_red} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\n// \t\t\t</div>\n// \t\t)\n// \t}\n// }\n\n// const [displayText, setDisplayText] = useState(\"Orders\");\n// const [nextId, setNextId] = useState(3)\n// const [activeTabId, setActiveTabId] = useState(1)\n\n// // Static tabs Active/Complete\n// const [tabs, setTabs] = useState([\n//     {\n//         id: 1,\n//         text: 'Active Orders',\n//         tabType: TabTypeOrder.ACTIVE,\n//         viewType: ViewType.ACTIVE_ORDERS,\n//     },\n//     {\n//         id: 2,\n//         text: 'Completed Orders',\n//         tabType: TabTypeOrder.INACTIVE,\n//         viewType: ViewType.COMPLETED_ORDERS,\n//     },\n// ])\n\n\n// \t// Add/open new tab for READ ONLY ORDER VIEW\n// \tfunction addAndOpenOrderView(order){\n// \t\tconst tab = tabs.find(tab => (tab.viewType === ViewType.ORDER && order.id === tab.order.id))\n// \t\tif(tab === undefined){\n// \t\t\tconst newTab = {\n// \t\t\t\tid: {nextId},\n// \t\t\t\ttext: order.customer.lastName,\n// \t\t\t\ttabType: TabTypeOrder.ACTIVE,\n// \t\t\t\tviewType: ViewType.ORDER,\n// \t\t\t\torder: order,\n// \t\t\t}\n\n// \t\t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n// \t\t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\n// \t\t\tconst newTabsList = tabs.slice()\n// \t\t\tsetTabs([...newTabsList, newTab])\n// \t\t\tsetActiveTabId(newTab.id)\n// \t\t\tsetNextId(nextId + 1)\n\n// \t\t} else{\n// \t\t\tsetActiveTab(tab.id)\n// \t\t}\n// \t}\n\n// \t// Add new tab for ADD ORDER\n// \tfunction addNewOrder() {\n// \t\tconst newTab = {\n// \t\t\tid: {nextId},\n// \t\t\ttext: \"New Order\",\n// \t\t\ttabType: TabTypeOrder.ACTIVE,\n// \t\t\tviewType: ViewType.ADD_ORDER,\n// \t\t\torder: {\n// \t\t\t\t// or should i pass in an order?\n// \t\t\t},\n// \t\t}\n// \t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n// \t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\n// \t\tconst newTabsList = tabs.slice()\n// \t\tsetTabs([...newTabsList, newTab])\n// \t\tsetActiveTabId(newTab.id)\n// \t\tsetNextId(nextId + 1)\n// \t}\n\n// \t// Remove tab from bar\n// \tfunction removeOrderView(id, event){\n// \t\tif(activeTabId === id){\n// \t\t\tconst newActiveTab = tabs[tabs.length-2]\n// \t\t\tnewActiveTab.tabType = TabTypeOrder.ACTIVE\n// \t\t\tconst newTabsList = tabs.slice().filter(tab => tab.id !== id)\n// \t\t\tsetTabs(newTabsList)\n// \t\t\tsetActiveTabId(newActiveTab.id)\n\n// \t\t} else{\n// \t\t\tsetTabs(tabs.filter(tab => tab.id !== id))\n// \t\t}\n\n// \t\t{/*So that the tab does not click when the close button is clicked*/}\n// \t\tevent.stopPropagation()\n// \t}\n\n// \t// Set active tab - pass in id\n// \tfunction setActiveTab(id){\n// \t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n// \t\tconst newActiveTab = tabs.find(tab => tab.id === id)\n// \t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\n// \t\tnewActiveTab.tabType = TabTypeOrder.ACTIVE\n// \t\tconst newTabsList = tabs.slice()\n// \t\tsetTabs(newTabsList)\n// \t\tsetActiveTabId(newActiveTab.id)\n// \t}\n\n\n\n// class MainOrderView extends Component {\n\n//     render() {\n//         return (\n//             <div id='Orders'>\t\n// \t\t\t\t<div className=\"OrderTitleButton\">\n// \t\t\t\t\t<h1 className='PageHeader'>{'Orders'}</h1> \n// \t\t\t\t\t<button className='OrderActionButton' onClick={createOrder}>\n// \t\t\t\t\t\t<img src={add_icon} alt='add order' style={{paddingRight: '10px'}}/>\n// \t\t\t\t\t\t<h4>Add Order</h4>\n// \t\t\t\t\t</button>\n// \t\t\t\t</div>\n// \t\t\t\t<div id='OrdersDisplay' style={{display: 'flex', displayDirection: 'column'}}>\n// \t\t\t\t\t{/* here we can call the tab component */}\n// \t\t\t\t\t<div className='tabRow'>\n// \t\t\t\t\t\t{tabs.map((tab) => (\n// \t\t\t\t\t\t\t<TabButton key={tab.id} id={tab.id} text={tab.text} tabType={tab.tabType} viewType={tab.viewType} onClick={setActiveTab} onDelete={removeOrderView}/>\n// \t\t\t\t\t\t))}\n// \t\t\t\t\t</div>\n\t\t\t\t\t\n// \t\t\t\t\t<div id='rectangle' style={{height: '13px', width: '1144px', backgroundColor: '#C62032'}} />\n// \t\t\t\t\t<OrdersListTEST displayContent={displayContent}/>\n// \t\t\t\t</div>\n// \t\t\t</div>\n//           );\n//     }\n\n// }\n\n// export default MainOrderView;\n"],"mappings":"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GAAG,CAACxB,EAAG;MAAC,IAAI,EAAEwB,GAAG,CAACvB,IAAK;MAAC,OAAO,EAAEuB,GAAG,CAACtB,OAAQ;MAAC,QAAQ,EAAEsB,GAAG,CAACrB,QAAS;MAAC,OAAO,EAAE8B,YAAa;MAAC,QAAQ,EAAEE,eAAgB;MAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IAAA,EAAE;EAAA,CACrJ,CAAC,CACG,eACN;IAAK,EAAE,EAAC,WAAW;IAAC,KAAK,EAAE;MAACY,MAAM,EAAE,MAAM;MAAEC,KAAK,EAAE,QAAQ;MAAEC,eAAe,EAAE;IAAS,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAG,eAC5F,oBAAC,cAAc;IAAC,cAAc,EAAET,cAAe;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAE,CAE5C,CACD;AAER,CAAC;AAED,eAAe5B,aAAa;;AAE5B;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA"},"metadata":{},"sourceType":"module"}