{"ast":null,"code":"import _classCallCheck from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/src/views/orders/OrdersListTEST.js\";\nimport cross_red from \"../../assets/img/close_red.svg\";\nimport cross_white from \"../../assets/img/close_white.svg\";\nimport add_icon from \"../../assets/img/plus_white.svg\";\nimport React, { useState } from 'react';\nimport { createOrder, retrieveOrders } from '../../store/order_slice';\n// import Order from './Order';\n// import OrderAddNew, { AddOrder } from './OrderAddNew';\nvar OrderList = /*#__PURE__*/function (_Component) {\n  _inherits(OrderList, _Component);\n  function OrderList(props) {\n    _classCallCheck(this, OrderList);\n    return _possibleConstructorReturn(this, _getPrototypeOf(OrderList).call(this, props));\n  }\n\n  // This gets the users when the component loads\n  _createClass(OrderList, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.retrieveOrders();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var orders = this.props.orders;\n      console.log(this.props);\n      return /*#__PURE__*/React.createElement(\"div\", {\n        id: \"OrderList\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 5\n        }\n      });\n    }\n  }]);\n  return OrderList;\n}(Component);\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    orders: state.orders\n  };\n};\nexport default connect(mapStateToProps, {\n  createOrder: createOrder,\n  retrieveOrders: retrieveOrders\n})(OrderList);\n// export const TabTypeOrder = {\n// \tACTIVE: 1,\n// \tINACTIVE: 2,\n// }\n\n// const ViewType = {\n// \tACTIVE_ORDERS: 1,\n// \tCOMPLETED_ORDERS: 2,\n// \tORDER: 3,\n// \tADD_ORDER: 4\n// }\n\n{/*\r\n * <h1>TEST:admin?</h1>\r\n \t\t\t<div>\r\n \t\t\t  <div id='OrderView_Header'>\r\n \t\t\t\t  <button onClick={this.saveUser} type=\"submit\">Save</button>\r\n \t\t\t\t  <button onClick={this.refreshUser}>Cancel</button>\r\n \t\t\t\t  <button className=\"m-3 btn btn-sm btn-danger\" onClick={this.removeAllUsers} > Remove All </button>\r\n \t\t\t  </div>\r\n \t\t\t  <div className=\"list_users\">\r\n \t\t\t\t<h3>List of users</h3>\r\n \t\t\t\t<ul className=\"list-group\">\r\n \t\t\t\t  {users &&\r\n \t\t\t\t\tusers.map((user, index) => (\r\n \t\t\t\t\t  <li className={\"list-group-item \" + (index === currentIndex ? \"active\" : \"\")}\r\n \t\t\t\t\t\t  onClick={() => this.setActiveUser(user, index)} key={index}>\r\n \t\t\t\t\t\t  {user.nickname}\r\n \t\t\t\t\t\t  {/* <button onClick={this.updateContent} type=\"submit\">Edit</button> */}\n{/*\r\n {/* <button onClick={this.removeUser} type=\"delete\">Delete</button> */}\n{/*\r\n </li>\r\n ))}\r\n </ul>\r\n </div>\r\n <div className=\"form-group\">\r\n <label htmlFor=\"email\">Email</label>\r\n <input\r\n type=\"text\"\r\n className=\"form-control\"\r\n id=\"email\"\r\n required\r\n value={this.state.email || ''}\r\n onChange={this.handleInputChange}\r\n name=\"email\"\r\n />\r\n </div>\r\n <div className=\"form-group\">\r\n <label htmlFor=\"password\">Password</label>\r\n <input\r\n type=\"text\"\r\n className=\"form-control\"\r\n id=\"password\"\r\n value={this.state.password || ''}\r\n onChange={this.handleInputChange}\r\n name=\"password\"\r\n />\r\n </div>\r\n <div className=\"form-group\">\r\n <label htmlFor=\"nickname\">Name</label>\r\n <input\r\n type=\"text\"\r\n className=\"form-control\"\r\n id=\"nickname\"\r\n value={this.state.nickname || ''}\r\n onChange={this.handleInputChange}\r\n name=\"nickname\"\r\n />\r\n </div>\r\n <div className=\"form-group\">\r\n <label htmlFor=\"message\">Permission Type</label>\r\n <input\r\n type=\"text\"\r\n className=\"form-control\"\r\n id=\"message\"\r\n value={this.state.permissionType || ''}\r\n onChange={this.handleInputChange}\r\n name=\"permissionType\"\r\n />\r\n </div>\r\n </div>\r\n <div className=\"col-md-6\">\r\n {currentUser.userID ? (\r\n <div>\r\n <h4>User</h4>\r\n <div>\r\n <label>\r\n <strong>Name:</strong>\r\n </label>{\" \"}\r\n {\"Hello \" + currentUser.nickname + \": \" + currentUser.email + \" USERID \" + currentUser.userID}\r\n </div>\r\n <div>\r\n <label>\r\n <strong>Permission:</strong>\r\n </label>{\" \"}\r\n {currentUser.permissionType}\r\n </div>\r\n <button onClick={this.updateContent} type=\"submit\">Edit</button>\r\n <button onClick={this.removeUser} type=\"delete\">Delete</button>\r\n </div>\r\n ) : (\r\n <div>\r\n <br />\r\n <p>Please click on a User...</p>\r\n </div>\r\n )}\r\n </div>\r\n */}\n\n// export const TabButton = ({id, text, tabType, viewType, onClick, onDelete}) => {\n// \tif(tabType === TabTypeOrder.ACTIVE){\n// \t\treturn(\n// \t\t\t<div className='tabRowButtonActive' onClick={() => onClick(id)}>\n// \t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\n// \t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_white} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\n// \t\t\t</div>\n// \t\t)\n// \t} else if(tabType === TabTypeOrder.INACTIVE){\n// \t\treturn(\n// \t\t\t<div className='tabRowButton' onClick={() => onClick(id)}>\n// \t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\n// \t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_red} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\n// \t\t\t</div>\n// \t\t)\n// \t}\n// }\n\n// // Cards are part of the list\n// const OrderCard = ({order, color, onClick}) => {\n// \tvar numberOfLogs = 0\n// \torder.productsOrdered.forEach(product => numberOfLogs+= product.quantity)\n\n// \treturn(\n// \t\t<div className='OrderCard' onClick={() => onClick(order)}>\n// \t\t\t<div className='OrderCardHeader' style={{backgroundColor: color}}>\n// \t\t\t\t<h4 style={{fontWeight: 'bold'}}>{order.customer.lastName}, {order.customer.firstName}</h4>\n// \t\t\t</div>\n// \t\t\t<div className='OrderCardContent'>\n// \t\t\t\t<h4>Reference: {order.referenceNumber}</h4>\n// \t\t\t\t<h4>Invoice: {(order.invoiceNumber === undefined) ? 'NA' : order.invoiceNumber}</h4>\n// \t\t\t\t<h4>Logs Ordered: {numberOfLogs}</h4>\n// \t\t\t</div>\n// \t\t</div>\n// \t)\n// }\n\n// // Columns are part of the list\n// const OrderDisplayColumn = ({title, orders, orderCardOnClick}) => {\n// \treturn(\n// \t\t<ul className='OrderDisplayColumn'>\n// \t\t\t<li key={title} style={{position: 'sticky', top: '0px'}}><div className='OrderDisplayColumnTitle'><h3 style={{padding: '0px', margin: '0px'}}>{title}</h3></div></li>\n\n// \t\t\t{orders.map((order) => (\n// \t\t\t\t<li><OrderCard key={order.referenceNumber} order={order} color='#90E0C9' onClick={orderCardOnClick} /></li>\n// \t\t\t))}\n// \t\t</ul>\n// \t)\n// }\n\n// // Active Orders Tab\n// const ActiveOrders = ({orders, orderCardOnClick}) => {\n// \treturn (\n// \t\t<div id='OrderDisplayColumns'>\n// \t\t\t<OrderDisplayColumn title='Placed' orders={orders.filter(order => order.status === 'PLACED')} orderCardOnClick={orderCardOnClick} />\n// \t\t\t<OrderDisplayColumn title='Processed' orders={orders.filter(order => order.status === 'PROCESSED')} orderCardOnClick={orderCardOnClick} />\n// \t\t\t<OrderDisplayColumn title='Shipped' orders={orders.filter(order => order.status === 'SHIPPED')} orderCardOnClick={orderCardOnClick} />\n// \t\t</div>\n// \t)\n// }\n\n// // Completed Orders Tab\n// const CompletedOrders = ({orders, orderCardOnClick}) => {\n// \treturn (\n// \t\t<div id='OrderDisplayColumns' style={{display: 'flex', displayDirection: 'column'}}>\n// \t\t\t<OrderDisplayColumn title='Completed' orders={orders} orderCardOnClick={orderCardOnClick} />\n// \t\t</div>\n// \t)\n// }\n\n// /**\n//  * \n//  * @returns OrderList\n//  */\n// const OrderList = () => {\n\n// \t// Get the orders from the store\n// \tvar orders = retrieveOrders;\n\n// \t// Set the text\n// \tconst [displayText, setDisplayText] = useState(\"Orders\")\n// \tconst [nextId, setNextId] = useState(3)\n// \tconst [activeTabId, setActiveTabId] = useState(1)\n\n// \t// Static tabs Active/Complete\n// \tconst [tabs, setTabs] = useState([\n// \t\t{\n// \t\t\tid: 1,\n// \t\t\ttext: 'Active Orders',\n// \t\t\ttabType: TabTypeOrder.ACTIVE,\n// \t\t\tviewType: ViewType.ACTIVE_ORDERS,\n// \t\t},\n// \t\t{\n// \t\t\tid: 2,\n// \t\t\ttext: 'Completed Orders',\n// \t\t\ttabType: TabTypeOrder.INACTIVE,\n// \t\t\tviewType: ViewType.COMPLETED_ORDERS,\n// \t\t},\n// \t])\n\n// \t// Add/open new tab for READ ONLY ORDER VIEW\n// \tfunction addAndOpenOrderView(order){\n// \t\tconst tab = tabs.find(tab => (tab.viewType === ViewType.ORDER && order.id === tab.order.id))\n// \t\tif(tab === undefined){\n// \t\t\tconst newTab = {\n// \t\t\t\tid: {nextId},\n// \t\t\t\ttext: order.customer.lastName,\n// \t\t\t\ttabType: TabTypeOrder.ACTIVE,\n// \t\t\t\tviewType: ViewType.ORDER,\n// \t\t\t\torder: order,\n// \t\t\t}\n\n// \t\t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n// \t\t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\n// \t\t\tconst newTabsList = tabs.slice()\n// \t\t\tsetTabs([...newTabsList, newTab])\n// \t\t\tsetActiveTabId(newTab.id)\n// \t\t\tsetNextId(nextId + 1)\n\n// \t\t} else{\n// \t\t\tsetActiveTab(tab.id)\n// \t\t}\n// \t}\n\n// \t// Add new tab for ADD ORDER\n// \tfunction addNewOrder() {\n// \t\tconst newTab = {\n// \t\t\tid: {nextId},\n// \t\t\ttext: \"New Order\",\n// \t\t\ttabType: TabTypeOrder.ACTIVE,\n// \t\t\tviewType: ViewType.ADD_ORDER,\n// \t\t\torder: {\n// \t\t\t\t// or should i pass in an order?\n// \t\t\t},\n// \t\t}\n// \t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n// \t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\n// \t\tconst newTabsList = tabs.slice()\n// \t\tsetTabs([...newTabsList, newTab])\n// \t\tsetActiveTabId(newTab.id)\n// \t\tsetNextId(nextId + 1)\n// \t}\n\n// \t// Remove tab from bar\n// \tfunction removeOrderView(id, event){\n// \t\tif(activeTabId === id){\n// \t\t\tconst newActiveTab = tabs[tabs.length-2]\n// \t\t\tnewActiveTab.tabType = TabTypeOrder.ACTIVE\n// \t\t\tconst newTabsList = tabs.slice().filter(tab => tab.id !== id)\n// \t\t\tsetTabs(newTabsList)\n// \t\t\tsetActiveTabId(newActiveTab.id)\n\n// \t\t} else{\n// \t\t\tsetTabs(tabs.filter(tab => tab.id !== id))\n// \t\t}\n\n// \t\t{/*So that the tab does not click when the close button is clicked*/}\n// \t\tevent.stopPropagation()\n// \t}\n\n// \t// Set active tab - pass in id\n// \tfunction setActiveTab(id){\n// \t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n// \t\tconst newActiveTab = tabs.find(tab => tab.id === id)\n// \t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\n// \t\tnewActiveTab.tabType = TabTypeOrder.ACTIVE\n// \t\tconst newTabsList = tabs.slice()\n// \t\tsetTabs(newTabsList)\n// \t\tsetActiveTabId(newActiveTab.id)\n// \t}\n\n// \tlet displayContent\n// \tconst activeContent = tabs.find(tab => tab.id === activeTabId)\n\n// \tswitch(activeContent.viewType){\n// \t\tcase ViewType.ACTIVE_ORDERS:\n// \t\t\tdisplayContent = <ActiveOrders orders={orders.filter(order => (order.status === 'PLACED' || order.status === 'PROCESSED' || order.status === 'SHIPPED'))} orderCardOnClick={addAndOpenOrderView} />\n// \t\t\tbreak\n// \t\tcase ViewType.COMPLETED_ORDERS:\n// \t\t\tdisplayContent = <CompletedOrders orders={orders.filter(order => order.status === 'COMPLETED')} orderCardOnClick={addAndOpenOrderView} />\n// \t\t\tbreak\n// \t\tcase ViewType.ORDER:\n// \t\t\tdisplayContent = <Order order={activeContent.order}/>\n// \t\t\tbreak\n// \t\tcase ViewType.ADD_ORDER:\n// \t\t\tdisplayContent = <OrderAddNew addOrder={createOrder}/>\n// \t\t\tbreak\n// \t}\n\n// \treturn(\n// \t\t<div id='Orders'>\t\n// \t\t\t<div className=\"OrderTitleButton\">\n// \t\t\t\t<h1 className='PageHeader'>{displayText}</h1> \n// \t\t\t\t<button className='OrderActionButton' onClick={addNewOrder}>\n// \t\t\t\t\t<img src={add_icon} alt='add order' style={{paddingRight: '10px'}}/>\n// \t\t\t\t\t<h4>Add Order</h4>\n// \t\t\t\t</button>\n// \t\t\t</div>\n// \t\t\t<div id='OrdersDisplay' style={{display: 'flex', displayDirection: 'column'}}>\n// \t\t\t\t{/* here we can call the tab component */}\n// \t\t\t\t<div className='tabRow'>\n// \t\t\t\t\t{tabs.map((tab) => (\n// \t\t\t\t\t\t<TabButton key={tab.id} id={tab.id} text={tab.text} tabType={tab.tabType} viewType={tab.viewType} onClick={setActiveTab} onDelete={removeOrderView}/>\n// \t\t\t\t\t))}\n// \t\t\t\t</div>\n// \t\t\t\t<div id='rectangle' style={{height: '13px', width: '1144px', backgroundColor: '#C62032'}} />\n// \t\t\t\t{displayContent}\n// \t\t\t</div>\n// \t\t</div>\n// \t)\n// }\n\n// export default OrderList;","map":{"version":3,"names":["React","useState","createOrder","retrieveOrders","OrderList","props","orders","console","log","Component","mapStateToProps","state","connect"],"sources":["/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/src/views/orders/OrdersListTEST.js"],"sourcesContent":["import cross_red from '../../assets/img/close_red.svg'\r\nimport cross_white from '../../assets/img/close_white.svg'\r\nimport add_icon from '../../assets/img/plus_white.svg'\r\nimport React, { useState } from 'react'\r\n\r\nimport { createOrder, retrieveOrders } from '../../store/order_slice'\r\n// import Order from './Order';\r\n// import OrderAddNew, { AddOrder } from './OrderAddNew';\r\n\r\nclass OrderList extends Component {\r\n\tconstructor(props) {\r\n\t  super(props);\r\n      \r\n\t}\r\n  \r\n\t// This gets the users when the component loads\r\n\tcomponentDidMount() {\r\n\t  this.props.retrieveOrders();\r\n\t}\r\n\r\n  \r\n\trender() {\r\n\t  const {orders} = this.props;\r\n\t  console.log(this.props);\r\n  \r\n\t  return (\r\n\t\t  <div id='OrderList'>\r\n\t\t\t  \r\n\t\t  </div>\r\n\t\t  \r\n\t  );\r\n\t}\r\n  }\r\n  \r\n  const mapStateToProps = (state) => {\r\n\treturn {\r\n\t  orders: state.orders,\r\n\t};\r\n  };\r\n  \r\nexport default connect(mapStateToProps, { createOrder, retrieveOrders })(OrderList);\r\n// export const TabTypeOrder = {\r\n// \tACTIVE: 1,\r\n// \tINACTIVE: 2,\r\n// }\r\n\r\n// const ViewType = {\r\n// \tACTIVE_ORDERS: 1,\r\n// \tCOMPLETED_ORDERS: 2,\r\n// \tORDER: 3,\r\n// \tADD_ORDER: 4\r\n// }\r\n\r\n{/*\r\n * <h1>TEST:admin?</h1>\r\n\t\t\t\t<div>\r\n\t\t\t\t  <div id='OrderView_Header'>\r\n\t\t\t\t\t  <button onClick={this.saveUser} type=\"submit\">Save</button>\r\n\t\t\t\t\t  <button onClick={this.refreshUser}>Cancel</button>\r\n\t\t\t\t\t  <button className=\"m-3 btn btn-sm btn-danger\" onClick={this.removeAllUsers} > Remove All </button>\r\n\t\t\t\t  </div>\r\n\t\t\t\t  <div className=\"list_users\">\r\n\t\t\t\t\t<h3>List of users</h3>\r\n\t\t\t\t\t<ul className=\"list-group\">\r\n\t\t\t\t\t  {users &&\r\n\t\t\t\t\t\tusers.map((user, index) => (\r\n\t\t\t\t\t\t  <li className={\"list-group-item \" + (index === currentIndex ? \"active\" : \"\")}\r\n\t\t\t\t\t\t\t  onClick={() => this.setActiveUser(user, index)} key={index}>\r\n\t\t\t\t\t\t\t  {user.nickname}\r\n\t\t\t\t\t\t\t  {/* <button onClick={this.updateContent} type=\"submit\">Edit</button> */} {/*\r\n\t\t\t\t\t\t\t  {/* <button onClick={this.removeUser} type=\"delete\">Delete</button> */} {/*\r\n\t\t\t\t\t\t  </li>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</ul>\r\n  \r\n\t\t\t\t  </div>\r\n  \r\n\t\t\t\t  <div className=\"form-group\">\r\n\t\t\t\t\t<label htmlFor=\"email\">Email</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t  type=\"text\"\r\n\t\t\t\t\t  className=\"form-control\"\r\n\t\t\t\t\t  id=\"email\"\r\n\t\t\t\t\t  required\r\n\t\t\t\t\t  value={this.state.email || ''}\r\n\t\t\t\t\t  onChange={this.handleInputChange}\r\n\t\t\t\t\t  name=\"email\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t  </div>\r\n  \r\n\t\t\t\t  <div className=\"form-group\">\r\n\t\t\t\t\t<label htmlFor=\"password\">Password</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t  type=\"text\"\r\n\t\t\t\t\t  className=\"form-control\"\r\n\t\t\t\t\t  id=\"password\"\r\n\t\t\t\t\t  value={this.state.password || ''}\r\n\t\t\t\t\t  onChange={this.handleInputChange}\r\n\t\t\t\t\t  name=\"password\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t  </div>\r\n  \r\n\t\t\t\t  <div className=\"form-group\">\r\n\t\t\t\t\t<label htmlFor=\"nickname\">Name</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t  type=\"text\"\r\n\t\t\t\t\t  className=\"form-control\"\r\n\t\t\t\t\t  id=\"nickname\"\r\n\t\t\t\t\t  value={this.state.nickname || ''}\r\n\t\t\t\t\t  onChange={this.handleInputChange}\r\n\t\t\t\t\t  name=\"nickname\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t  </div>\r\n  \r\n\t\t\t\t  <div className=\"form-group\">\r\n\t\t\t\t\t<label htmlFor=\"message\">Permission Type</label>\r\n\t\t\t\t\t<input\r\n\t\t\t\t\t  type=\"text\"\r\n\t\t\t\t\t  className=\"form-control\"\r\n\t\t\t\t\t  id=\"message\"\r\n\t\t\t\t\t  value={this.state.permissionType || ''}\r\n\t\t\t\t\t  onChange={this.handleInputChange}\r\n\t\t\t\t\t  name=\"permissionType\"\r\n\t\t\t\t\t/>\r\n\t\t\t\t  </div>\r\n\t\t\t\t</div>\r\n  \r\n\t\t\t\t<div className=\"col-md-6\">\r\n\t\t\t\t  {currentUser.userID ? (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t  <h4>User</h4>\r\n\t\t\t\t\t  <div>\r\n\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t  <strong>Name:</strong>\r\n\t\t\t\t\t\t</label>{\" \"}\r\n\t\t\t\t\t\t{\"Hello \" + currentUser.nickname + \": \" + currentUser.email + \" USERID \" + currentUser.userID}\r\n\t\t\t\t\t  </div>\r\n\t\t\t\t\t  <div>\r\n\t\t\t\t\t\t<label>\r\n\t\t\t\t\t\t  <strong>Permission:</strong>\r\n\t\t\t\t\t\t</label>{\" \"}\r\n\t\t\t\t\t\t{currentUser.permissionType}\r\n\t\t\t\t\t  </div>\r\n\t\t\t\t\t  <button onClick={this.updateContent} type=\"submit\">Edit</button>\r\n\t\t\t\t\t  <button onClick={this.removeUser} type=\"delete\">Delete</button>\r\n  \r\n\t\t\t\t\t</div>\r\n\t\t\t\t  ) : (\r\n\t\t\t\t\t<div>\r\n\t\t\t\t\t  <br />\r\n\t\t\t\t\t  <p>Please click on a User...</p>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t  )}\r\n\t\t\t\t</div>\r\n */}\r\n\r\n\r\n// export const TabButton = ({id, text, tabType, viewType, onClick, onDelete}) => {\r\n// \tif(tabType === TabTypeOrder.ACTIVE){\r\n// \t\treturn(\r\n// \t\t\t<div className='tabRowButtonActive' onClick={() => onClick(id)}>\r\n// \t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\r\n// \t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_white} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\r\n// \t\t\t</div>\r\n// \t\t)\r\n// \t} else if(tabType === TabTypeOrder.INACTIVE){\r\n// \t\treturn(\r\n// \t\t\t<div className='tabRowButton' onClick={() => onClick(id)}>\r\n// \t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\r\n// \t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_red} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\r\n// \t\t\t</div>\r\n// \t\t)\r\n// \t}\r\n// }\r\n\r\n// // Cards are part of the list\r\n// const OrderCard = ({order, color, onClick}) => {\r\n// \tvar numberOfLogs = 0\r\n// \torder.productsOrdered.forEach(product => numberOfLogs+= product.quantity)\r\n\r\n// \treturn(\r\n// \t\t<div className='OrderCard' onClick={() => onClick(order)}>\r\n// \t\t\t<div className='OrderCardHeader' style={{backgroundColor: color}}>\r\n// \t\t\t\t<h4 style={{fontWeight: 'bold'}}>{order.customer.lastName}, {order.customer.firstName}</h4>\r\n// \t\t\t</div>\r\n// \t\t\t<div className='OrderCardContent'>\r\n// \t\t\t\t<h4>Reference: {order.referenceNumber}</h4>\r\n// \t\t\t\t<h4>Invoice: {(order.invoiceNumber === undefined) ? 'NA' : order.invoiceNumber}</h4>\r\n// \t\t\t\t<h4>Logs Ordered: {numberOfLogs}</h4>\r\n// \t\t\t</div>\r\n// \t\t</div>\r\n// \t)\r\n// }\r\n\r\n// // Columns are part of the list\r\n// const OrderDisplayColumn = ({title, orders, orderCardOnClick}) => {\r\n// \treturn(\r\n// \t\t<ul className='OrderDisplayColumn'>\r\n// \t\t\t<li key={title} style={{position: 'sticky', top: '0px'}}><div className='OrderDisplayColumnTitle'><h3 style={{padding: '0px', margin: '0px'}}>{title}</h3></div></li>\r\n\r\n// \t\t\t{orders.map((order) => (\r\n// \t\t\t\t<li><OrderCard key={order.referenceNumber} order={order} color='#90E0C9' onClick={orderCardOnClick} /></li>\r\n// \t\t\t))}\r\n// \t\t</ul>\r\n// \t)\r\n// }\r\n\r\n// // Active Orders Tab\r\n// const ActiveOrders = ({orders, orderCardOnClick}) => {\r\n// \treturn (\r\n// \t\t<div id='OrderDisplayColumns'>\r\n// \t\t\t<OrderDisplayColumn title='Placed' orders={orders.filter(order => order.status === 'PLACED')} orderCardOnClick={orderCardOnClick} />\r\n// \t\t\t<OrderDisplayColumn title='Processed' orders={orders.filter(order => order.status === 'PROCESSED')} orderCardOnClick={orderCardOnClick} />\r\n// \t\t\t<OrderDisplayColumn title='Shipped' orders={orders.filter(order => order.status === 'SHIPPED')} orderCardOnClick={orderCardOnClick} />\r\n// \t\t</div>\r\n// \t)\r\n// }\r\n\r\n// // Completed Orders Tab\r\n// const CompletedOrders = ({orders, orderCardOnClick}) => {\r\n// \treturn (\r\n// \t\t<div id='OrderDisplayColumns' style={{display: 'flex', displayDirection: 'column'}}>\r\n// \t\t\t<OrderDisplayColumn title='Completed' orders={orders} orderCardOnClick={orderCardOnClick} />\r\n// \t\t</div>\r\n// \t)\r\n// }\r\n\r\n// /**\r\n//  * \r\n//  * @returns OrderList\r\n//  */\r\n// const OrderList = () => {\r\n\t\r\n// \t// Get the orders from the store\r\n// \tvar orders = retrieveOrders;\r\n\r\n// \t// Set the text\r\n// \tconst [displayText, setDisplayText] = useState(\"Orders\")\r\n// \tconst [nextId, setNextId] = useState(3)\r\n// \tconst [activeTabId, setActiveTabId] = useState(1)\r\n\r\n// \t// Static tabs Active/Complete\r\n// \tconst [tabs, setTabs] = useState([\r\n// \t\t{\r\n// \t\t\tid: 1,\r\n// \t\t\ttext: 'Active Orders',\r\n// \t\t\ttabType: TabTypeOrder.ACTIVE,\r\n// \t\t\tviewType: ViewType.ACTIVE_ORDERS,\r\n// \t\t},\r\n// \t\t{\r\n// \t\t\tid: 2,\r\n// \t\t\ttext: 'Completed Orders',\r\n// \t\t\ttabType: TabTypeOrder.INACTIVE,\r\n// \t\t\tviewType: ViewType.COMPLETED_ORDERS,\r\n// \t\t},\r\n// \t])\r\n\r\n// \t// Add/open new tab for READ ONLY ORDER VIEW\r\n// \tfunction addAndOpenOrderView(order){\r\n// \t\tconst tab = tabs.find(tab => (tab.viewType === ViewType.ORDER && order.id === tab.order.id))\r\n// \t\tif(tab === undefined){\r\n// \t\t\tconst newTab = {\r\n// \t\t\t\tid: {nextId},\r\n// \t\t\t\ttext: order.customer.lastName,\r\n// \t\t\t\ttabType: TabTypeOrder.ACTIVE,\r\n// \t\t\t\tviewType: ViewType.ORDER,\r\n// \t\t\t\torder: order,\r\n// \t\t\t}\r\n\r\n// \t\t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\r\n// \t\t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\r\n// \t\t\tconst newTabsList = tabs.slice()\r\n// \t\t\tsetTabs([...newTabsList, newTab])\r\n// \t\t\tsetActiveTabId(newTab.id)\r\n// \t\t\tsetNextId(nextId + 1)\r\n\r\n// \t\t} else{\r\n// \t\t\tsetActiveTab(tab.id)\r\n// \t\t}\r\n// \t}\r\n\r\n// \t// Add new tab for ADD ORDER\r\n// \tfunction addNewOrder() {\r\n// \t\tconst newTab = {\r\n// \t\t\tid: {nextId},\r\n// \t\t\ttext: \"New Order\",\r\n// \t\t\ttabType: TabTypeOrder.ACTIVE,\r\n// \t\t\tviewType: ViewType.ADD_ORDER,\r\n// \t\t\torder: {\r\n// \t\t\t\t// or should i pass in an order?\r\n// \t\t\t},\r\n// \t\t}\r\n// \t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\r\n// \t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\r\n// \t\tconst newTabsList = tabs.slice()\r\n// \t\tsetTabs([...newTabsList, newTab])\r\n// \t\tsetActiveTabId(newTab.id)\r\n// \t\tsetNextId(nextId + 1)\r\n// \t}\r\n\r\n// \t// Remove tab from bar\r\n// \tfunction removeOrderView(id, event){\r\n// \t\tif(activeTabId === id){\r\n// \t\t\tconst newActiveTab = tabs[tabs.length-2]\r\n// \t\t\tnewActiveTab.tabType = TabTypeOrder.ACTIVE\r\n// \t\t\tconst newTabsList = tabs.slice().filter(tab => tab.id !== id)\r\n// \t\t\tsetTabs(newTabsList)\r\n// \t\t\tsetActiveTabId(newActiveTab.id)\r\n\r\n// \t\t} else{\r\n// \t\t\tsetTabs(tabs.filter(tab => tab.id !== id))\r\n// \t\t}\r\n\r\n// \t\t{/*So that the tab does not click when the close button is clicked*/}\r\n// \t\tevent.stopPropagation()\r\n// \t}\r\n\r\n// \t// Set active tab - pass in id\r\n// \tfunction setActiveTab(id){\r\n// \t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\r\n// \t\tconst newActiveTab = tabs.find(tab => tab.id === id)\r\n// \t\tcurrentActiveTab.tabType = TabTypeOrder.INACTIVE\r\n// \t\tnewActiveTab.tabType = TabTypeOrder.ACTIVE\r\n// \t\tconst newTabsList = tabs.slice()\r\n// \t\tsetTabs(newTabsList)\r\n// \t\tsetActiveTabId(newActiveTab.id)\r\n// \t}\r\n\r\n// \tlet displayContent\r\n// \tconst activeContent = tabs.find(tab => tab.id === activeTabId)\r\n\r\n// \tswitch(activeContent.viewType){\r\n// \t\tcase ViewType.ACTIVE_ORDERS:\r\n// \t\t\tdisplayContent = <ActiveOrders orders={orders.filter(order => (order.status === 'PLACED' || order.status === 'PROCESSED' || order.status === 'SHIPPED'))} orderCardOnClick={addAndOpenOrderView} />\r\n// \t\t\tbreak\r\n// \t\tcase ViewType.COMPLETED_ORDERS:\r\n// \t\t\tdisplayContent = <CompletedOrders orders={orders.filter(order => order.status === 'COMPLETED')} orderCardOnClick={addAndOpenOrderView} />\r\n// \t\t\tbreak\r\n// \t\tcase ViewType.ORDER:\r\n// \t\t\tdisplayContent = <Order order={activeContent.order}/>\r\n// \t\t\tbreak\r\n// \t\tcase ViewType.ADD_ORDER:\r\n// \t\t\tdisplayContent = <OrderAddNew addOrder={createOrder}/>\r\n// \t\t\tbreak\r\n// \t}\r\n\r\n\r\n// \treturn(\r\n// \t\t<div id='Orders'>\t\r\n// \t\t\t<div className=\"OrderTitleButton\">\r\n// \t\t\t\t<h1 className='PageHeader'>{displayText}</h1> \r\n// \t\t\t\t<button className='OrderActionButton' onClick={addNewOrder}>\r\n// \t\t\t\t\t<img src={add_icon} alt='add order' style={{paddingRight: '10px'}}/>\r\n// \t\t\t\t\t<h4>Add Order</h4>\r\n// \t\t\t\t</button>\r\n// \t\t\t</div>\r\n// \t\t\t<div id='OrdersDisplay' style={{display: 'flex', displayDirection: 'column'}}>\r\n// \t\t\t\t{/* here we can call the tab component */}\r\n// \t\t\t\t<div className='tabRow'>\r\n// \t\t\t\t\t{tabs.map((tab) => (\r\n// \t\t\t\t\t\t<TabButton key={tab.id} id={tab.id} text={tab.text} tabType={tab.tabType} viewType={tab.viewType} onClick={setActiveTab} onDelete={removeOrderView}/>\r\n// \t\t\t\t\t))}\r\n// \t\t\t\t</div>\r\n// \t\t\t\t<div id='rectangle' style={{height: '13px', width: '1144px', backgroundColor: '#C62032'}} />\r\n// \t\t\t\t{displayContent}\r\n// \t\t\t</div>\r\n// \t\t</div>\r\n// \t)\r\n// }\r\n\r\n// export default OrderList;"],"mappings":";;;;;;;;;AAGA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,SAASC,WAAW,EAAEC,cAAc,QAAQ,yBAAyB;AACrE;AACA;AAAA,IAEMC,SAAS;EAAA;EACd,mBAAYC,KAAK,EAAE;IAAA;IAAA,8EACXA,KAAK;EAEb;;EAEA;EAAA;IAAA;IAAA,oCACoB;MAClB,IAAI,CAACA,KAAK,CAACF,cAAc,EAAE;IAC7B;EAAC;IAAA;IAAA,yBAGQ;MAAA,IACAG,MAAM,GAAI,IAAI,CAACD,KAAK,CAApBC,MAAM;MACbC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,KAAK,CAAC;MAEvB,oBACC;QAAK,EAAE,EAAC,WAAW;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAEb;IAGT;EAAC;EAAA;AAAA,EAtBsBI,SAAS;AAyB/B,IAAMC,eAAe,GAAG,SAAlBA,eAAe,CAAIC,KAAK,EAAK;EACpC,OAAO;IACLL,MAAM,EAAEK,KAAK,CAACL;EAChB,CAAC;AACA,CAAC;AAEH,eAAeM,OAAO,CAACF,eAAe,EAAE;EAAER,WAAW,EAAXA,WAAW;EAAEC,cAAc,EAAdA;AAAe,CAAC,CAAC,CAACC,SAAS,CAAC;AACnF;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,CAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gFAhBC;AAgBiF,CAAC;AACnF,uEADmF;AACF,CAAC;AAClF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GA7EkF;;AAuFl},"metadata":{},"sourceType":"module"}