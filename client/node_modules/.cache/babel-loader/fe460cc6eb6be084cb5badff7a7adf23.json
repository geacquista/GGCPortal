{"ast":null,"code":"import _classCallCheck from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _defineProperty from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/src/views/orders/Tab_ExistingOrder.js\";\nimport edit_icon from \"../../assets/img/edit_white.svg\";\nimport delete_icon from \"../../assets/img/trash_white.svg\";\nimport React, { useState, Component } from 'react';\nimport { connect, useDispatch, useSelector } from \"react-redux\";\nimport { updateOrder, deleteOrder, retrieveOrder } from '../../store/order_slice';\nimport { retrieveCustomer } from '../../store/customer_slice';\nimport { retrieveInvoice } from '../../store/invoice_slice';\nimport { retrieveShippingAddress } from '../../store/address_slice';\nimport { retrieveOrderLines } from '../../store/orderline_slice';\nimport CustomerInfo from './orderview_components/CustomerDetails';\nimport InvoiceDetails from './orderview_components/InvoiceDetails';\nimport GiftInfo from './orderview_components/GiftDetails';\nvar useOrderForm = function useOrderForm(order) {\n  var dispatch = useDispatch();\n  var _useState = useState(order),\n    _useState2 = _slicedToArray(_useState, 2),\n    inputs = _useState2[0],\n    setInputs = _useState2[1];\n  /* const [newOrder, setOrder] = useState(order) */\n  var ordersAmount = useSelector(function (state) {\n    return state.orders.length;\n  });\n  var handleSubmit = function handleSubmit(event) {\n    if (event) {\n      event.preventDefault();\n      dispatch();\n    }\n  };\n  var handleInputChange = function handleInputChange(event) {\n    event.persist();\n    setInputs(function (inputs) {\n      return _objectSpread({}, inputs, _defineProperty({}, event.target.name, event.target.value));\n    });\n  };\n  return {\n    handleSubmit: handleSubmit,\n    handleInputChange: handleInputChange,\n    inputs: inputs\n  };\n};\n\n//  const OrderEditView = ({order, orderFunction}) => {\n\n// \t// orderFunction do i need to import a function?\n// \tconst {inputs, handleInputChange, handleSubmit} = useOrderForm(order, orderFunction)\n// \tlet recipient\n// \tif(order.isGift){\n// \t\trecipient = order.giftFor\n\n// \t} else{\n// \t\trecipient = order.customer.firstName + ' ' + order.customer.lastName \n// \t}\n\n// \tvar numberOfFlavors = 0\n// \torder.productsOrdered.forEach(product => numberOfFlavors++)\n\n// \tvar numberOfLogs = 0\n// \torder.productsOrdered.forEach(product => numberOfLogs+= product.quantity)\n\n// \treturn (\n// \t\t<form onSubmit={handleSubmit}>\n// \t\t\t<div id='OrderView'>\n// \t\t\t\t<div id='OrderView_Header'>\n// \t\t\t\t\t<button type=\"submit\">Save</button>\n// \t\t\t\t\t<button>Cancel</button>\n// \t\t\t\t</div>\n// \t\t\t\t<div className='Row'>\n// \t\t\t\t\t<div className='Column'>\n// \t\t\t\t\t\t<div id='OrderView_General_Details'>\n// \t\t\t\t\t\t\t<table>\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Reference #</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><input type=\"text\" name=\"referenceNumber\" onChange={handleInputChange} value={inputs.referenceNumber} defaultValue={order.referenceNumber} required/></td>\n// \t\t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Invoice #</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><input type=\"text\" name=\"invoiceNumber\" onChange={handleInputChange} value={inputs.invoiceNumber} defaultValue={order.invoiceNumber}/></td>\n// \t\t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Date Placed</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><input type=\"text\" name=\"datePlaced\" onChange={handleInputChange} value={inputs.datePlaced} defaultValue={order.datePlaced} required/></td>\n// \t\t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t</table>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t<div id='OrderView_Customer_Details'>\n// \t\t\t\t\t\t\t<table>\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>First Name<br></br>Last Name</h4></td>\n// \t\t\t\t\t\t\t\t\t<td>\n// \t\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"customer.firstName\" onChange={handleInputChange} value={inputs.customer.firstName} defaultValue={order.customer.firstName} required/><br></br>\n// \t\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"lastName\" onChange={handleInputChange} value={inputs.customer.lastName} defaultValue={order.customer.lastName} required/>\n// \t\t\t\t\t\t\t\t\t</td>\n// \t\t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Email</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><input type=\"email\" name=\"email\" onChange={handleInputChange} value={inputs.customer.email} defaultValue={order.customer.email} required/></td>\n// \t\t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Phone</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><input type=\"tel\" name=\"phoneNumber\"onChange={handleInputChange}  value={inputs.customer.phoneNumber} defaultValue={order.customer.phoneNumber} required/></td>\n// \t\t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t</table>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t</div>\n\n// \t\t\t\t\t<div id='OrderView_Shipping_Details'>\n// \t\t\t\t\t\t<table>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Recipient</h4></td>\n// \t\t\t\t\t\t\t\t{order.isGift && <td><input type=\"text\" name=\"giftFor\" onChange={handleInputChange} value={inputs.giftFor} defaultValue={recipient} required/></td>}\n// \t\t\t\t\t\t\t\t{!order.isGift && <td><h4>{recipient}</h4></td>}\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Street Address<br></br>City<br></br>State<br></br>Zipcode</h4></td>\n// \t\t\t\t\t\t\t\t<td>\n// \t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"streetAddress\" onChange={handleInputChange} value={inputs.shippingAddress.streetAddress} defaultValue={order.shippingAddress.streetAddress} required/><br></br>\n// \t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"city\" onChange={handleInputChange} value={inputs.shippingAddress.city} defaultValue={order.shippingAddress.city} required/><br></br>\n// \t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"state\" onChange={handleInputChange} value={inputs.shippingAddress.state} defaultValue={order.shippingAddress.state} required/><br></br>\n// \t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"zipcode\" onChange={handleInputChange} value={inputs.shippingAddress.zipCode} defaultValue={order.shippingAddress.zipCode} required/>\n// \t\t\t\t\t\t\t\t</td>\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Tracking #</h4></td>\n// \t\t\t\t\t\t\t\t<input type=\"text\" name=\"shipmentTrackingNumber\" onChange={handleInputChange} value={inputs.shipmentTrackingNumber} defaultValue={order.shipmentTrackingNumber}/>\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Is Gift?</h4></td>\n// \t\t\t\t\t\t\t\t{order.isGift && <td><input type=\"checkbox\" onChange={handleInputChange} value={inputs.isGift} name=\"isGift\" checked/></td>}\n// \t\t\t\t\t\t\t\t{!order.isGift && <td><input type=\"checkbox\" onChange={handleInputChange} value={inputs.isGift} name=\"isGift\"/></td>}\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t{order.isGift && order.giftMessage !== '' && <td><h4 style={{fontWeight: 'bold'}}>Gift Message</h4></td>}\n// \t\t\t\t\t\t\t\t{order.isGift && order.giftMessage !== '' && <td><input type=\"text\" name=\"giftMessage\" onChange={handleInputChange} value={inputs.giftMessage} defaultValue={order.giftMessage}/></td>}\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t</table>\n// \t\t\t\t\t</div>\n// \t\t\t\t</div>\n\n// \t\t\t\t<div id='OrderView_Products_Details'>\n// \t\t\t\t\t<h4 style={{fontWeight: 'bold'}}>Flavor Information</h4>\n// \t\t\t\t\t<div className='Row'>\n// \t\t\t\t\t\t<table>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<th><h4 style={{fontWeight: 'bold'}}>Name</h4></th>\n// \t\t\t\t\t\t\t\t<th><h4 style={{fontWeight: 'bold'}}>SKU</h4></th>\n// \t\t\t\t\t\t\t\t<th><h4 style={{fontWeight: 'bold'}}>Quantity</h4></th>\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t{order.productsOrdered.map((product) => (\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4>{product.product.name}</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><h4>{product.product.id}</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><h4>{product.quantity}</h4></td>\n// \t\t\t\t\t\t\t\t</tr>\t\t\t\t\t\n// \t\t\t\t\t\t\t))}\n// \t\t\t\t\t\t</table>\n// \t\t\t\t\t\t<table>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<th><h4 style={{fontWeight: 'bold'}}>At a Glance:</h4></th>\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Total Number of Logs:</h4></td>\n// \t\t\t\t\t\t\t\t<td><h4>{numberOfLogs}</h4></td>\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Total Number of Flavors:</h4></td>\n// \t\t\t\t\t\t\t\t<td><h4>{numberOfFlavors}</h4></td>\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t</table>\n// \t\t\t\t\t</div>\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t</form>\n// \t)\n// }\n\n// // this will be used to dispatch actions\n// // import { useSelector, useDispatch } from 'react-redux';\n\n/**\n * This is the view of a singular order. \n * @param order \n * @returns This returns the view of a singular existing order \n */\nvar OrderViewOnly = function OrderViewOnly(_ref) {\n  var order = _ref.order;\n  console.log(order);\n  // let recipient\n  // if(order.isGift){\n  // \trecipient = order.giftFor\n\n  // } else{\n  // \t// recipient = order.customer.firstName + ' ' + order.customer.lastName \n  // }\n\n  // var numberOfFlavors = 0\n  // order.productsOrdered.forEach(product => numberOfFlavors+=1)\n\n  // var numberOfLogs = 0\n  // order.productsOrdered.forEach(product => numberOfLogs+= product.quantity)\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    id: \"OrderView\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"OrderView_Header\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"OrderActionButton\",\n    onClick: function onClick() {\n      return /*#__PURE__*/React.createElement(OrderViewOnly, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 57\n        }\n      });\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: edit_icon,\n    alt: \"add order\",\n    style: {\n      paddingRight: '10px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 6\n    }\n  }, \"Edit Order\")), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"OrderActionButton\",\n    onClick: deleteOrder,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: delete_icon,\n    alt: \"add order\",\n    style: {\n      paddingRight: '10px'\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(\"h4\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 6\n    }\n  }, \"Delete Order\"))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Row\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 4\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Column\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CustomerInfo, {\n    customerId: order.customerId,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(GiftInfo, {\n    order: order,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(ShippingInfo, {\n    shippingId: order.shippingId,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 6\n    }\n  }), /*#__PURE__*/React.createElement(InvoiceDetails, {\n    orderID: order.orderID,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 239,\n      columnNumber: 6\n    }\n  }))));\n};\nvar ExistingOrder = /*#__PURE__*/function (_Component) {\n  _inherits(ExistingOrder, _Component);\n  function ExistingOrder(props) {\n    _classCallCheck(this, ExistingOrder);\n    return _possibleConstructorReturn(this, _getPrototypeOf(ExistingOrder).call(this, props));\n  }\n  _createClass(ExistingOrder, [{\n    key: \"updateOrder\",\n    value: function updateOrder() {} // This gets the users when the component loads\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      //   this.props.retrieveOrder();\n      //   this.props.retrieveCustomer();\n      //   this.props.retrieveInvoice();\n      //   this.props.retrieveOrderLines();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var order = this.props.order;\n      return /*#__PURE__*/React.createElement(OrderViewOnly, {\n        order: this.props.order,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 4\n        }\n      });\n    }\n  }]);\n  return ExistingOrder;\n}(Component); // Mapping only the parts of the redux store that we want to work with on this component\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    customers: state.customers,\n    orderline: state.orderline,\n    invoices: state.invoices,\n    shippingAddresses: state.shippingAddresses\n  };\n};\nexport default connect(mapStateToProps, {\n  retrieveOrder: retrieveOrder,\n  retrieveCustomer: retrieveCustomer,\n  retrieveOrderLines: retrieveOrderLines,\n  retrieveInvoice: retrieveInvoice\n})(ExistingOrder);","map":{"version":3,"names":["React","useState","Component","connect","useDispatch","useSelector","updateOrder","deleteOrder","retrieveOrder","retrieveCustomer","retrieveInvoice","retrieveShippingAddress","retrieveOrderLines","CustomerInfo","InvoiceDetails","GiftInfo","useOrderForm","order","dispatch","inputs","setInputs","ordersAmount","state","orders","length","handleSubmit","event","preventDefault","handleInputChange","persist","target","name","value","OrderViewOnly","console","log","edit_icon","paddingRight","delete_icon","customerId","shippingId","orderID","ExistingOrder","props","mapStateToProps","customers","orderline","invoices","shippingAddresses"],"sources":["/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/src/views/orders/Tab_ExistingOrder.js"],"sourcesContent":["import edit_icon from '../../assets/img/edit_white.svg'\nimport delete_icon from '../../assets/img/trash_white.svg'\nimport React, { useState, Component } from 'react'\nimport { connect, useDispatch, useSelector } from \"react-redux\";\n\nimport { updateOrder, deleteOrder, retrieveOrder } from '../../store/order_slice'\nimport { retrieveCustomer } from '../../store/customer_slice'\nimport { retrieveInvoice }\tfrom '../../store/invoice_slice'\nimport { retrieveShippingAddress } from '../../store/address_slice';\nimport { retrieveOrderLines } from '../../store/orderline_slice'\nimport CustomerInfo from './orderview_components/CustomerDetails';\nimport InvoiceDetails from './orderview_components/InvoiceDetails';\nimport GiftInfo from './orderview_components/GiftDetails';\n\n\n\nconst useOrderForm = (order) => {\n\n\tconst dispatch = useDispatch();\n\t  const [inputs, setInputs] = useState(order)\n\t  /* const [newOrder, setOrder] = useState(order) */\n  \n\tconst ordersAmount = useSelector((state) => state.orders.length);\n  \n  \n\t  const handleSubmit = (event) => {\n\t\t  if(event) {\n\t\t\t  event.preventDefault()\n\t\t\t  dispatch(\n\t\t);\n\t\t  }\n\t  }\n\t  const handleInputChange = (event) => {\n\t\t  event.persist()\n\t\t  setInputs(inputs => ({...inputs, [event.target.name]: event.target.value}))\n\t  }\n\t  return {\n\t\t  handleSubmit,\n\t\t  handleInputChange,\n\t\t  inputs\n\t  };\n  }\n\n//  const OrderEditView = ({order, orderFunction}) => {\n\n// \t// orderFunction do i need to import a function?\n// \tconst {inputs, handleInputChange, handleSubmit} = useOrderForm(order, orderFunction)\n// \tlet recipient\n// \tif(order.isGift){\n// \t\trecipient = order.giftFor\n\n// \t} else{\n// \t\trecipient = order.customer.firstName + ' ' + order.customer.lastName \n// \t}\n\n// \tvar numberOfFlavors = 0\n// \torder.productsOrdered.forEach(product => numberOfFlavors++)\n\n// \tvar numberOfLogs = 0\n// \torder.productsOrdered.forEach(product => numberOfLogs+= product.quantity)\n\n// \treturn (\n// \t\t<form onSubmit={handleSubmit}>\n// \t\t\t<div id='OrderView'>\n// \t\t\t\t<div id='OrderView_Header'>\n// \t\t\t\t\t<button type=\"submit\">Save</button>\n// \t\t\t\t\t<button>Cancel</button>\n// \t\t\t\t</div>\n// \t\t\t\t<div className='Row'>\n// \t\t\t\t\t<div className='Column'>\n// \t\t\t\t\t\t<div id='OrderView_General_Details'>\n// \t\t\t\t\t\t\t<table>\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Reference #</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><input type=\"text\" name=\"referenceNumber\" onChange={handleInputChange} value={inputs.referenceNumber} defaultValue={order.referenceNumber} required/></td>\n// \t\t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Invoice #</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><input type=\"text\" name=\"invoiceNumber\" onChange={handleInputChange} value={inputs.invoiceNumber} defaultValue={order.invoiceNumber}/></td>\n// \t\t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Date Placed</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><input type=\"text\" name=\"datePlaced\" onChange={handleInputChange} value={inputs.datePlaced} defaultValue={order.datePlaced} required/></td>\n// \t\t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t</table>\n// \t\t\t\t\t\t</div>\n\n// \t\t\t\t\t\t<div id='OrderView_Customer_Details'>\n// \t\t\t\t\t\t\t<table>\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>First Name<br></br>Last Name</h4></td>\n// \t\t\t\t\t\t\t\t\t<td>\n// \t\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"customer.firstName\" onChange={handleInputChange} value={inputs.customer.firstName} defaultValue={order.customer.firstName} required/><br></br>\n// \t\t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"lastName\" onChange={handleInputChange} value={inputs.customer.lastName} defaultValue={order.customer.lastName} required/>\n// \t\t\t\t\t\t\t\t\t</td>\n// \t\t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Email</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><input type=\"email\" name=\"email\" onChange={handleInputChange} value={inputs.customer.email} defaultValue={order.customer.email} required/></td>\n// \t\t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Phone</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><input type=\"tel\" name=\"phoneNumber\"onChange={handleInputChange}  value={inputs.customer.phoneNumber} defaultValue={order.customer.phoneNumber} required/></td>\n// \t\t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t</table>\n// \t\t\t\t\t\t</div>\n// \t\t\t\t\t</div>\n\n// \t\t\t\t\t<div id='OrderView_Shipping_Details'>\n// \t\t\t\t\t\t<table>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Recipient</h4></td>\n// \t\t\t\t\t\t\t\t{order.isGift && <td><input type=\"text\" name=\"giftFor\" onChange={handleInputChange} value={inputs.giftFor} defaultValue={recipient} required/></td>}\n// \t\t\t\t\t\t\t\t{!order.isGift && <td><h4>{recipient}</h4></td>}\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Street Address<br></br>City<br></br>State<br></br>Zipcode</h4></td>\n// \t\t\t\t\t\t\t\t<td>\n// \t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"streetAddress\" onChange={handleInputChange} value={inputs.shippingAddress.streetAddress} defaultValue={order.shippingAddress.streetAddress} required/><br></br>\n// \t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"city\" onChange={handleInputChange} value={inputs.shippingAddress.city} defaultValue={order.shippingAddress.city} required/><br></br>\n// \t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"state\" onChange={handleInputChange} value={inputs.shippingAddress.state} defaultValue={order.shippingAddress.state} required/><br></br>\n// \t\t\t\t\t\t\t\t\t<input type=\"text\" name=\"zipcode\" onChange={handleInputChange} value={inputs.shippingAddress.zipCode} defaultValue={order.shippingAddress.zipCode} required/>\n// \t\t\t\t\t\t\t\t</td>\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Tracking #</h4></td>\n// \t\t\t\t\t\t\t\t<input type=\"text\" name=\"shipmentTrackingNumber\" onChange={handleInputChange} value={inputs.shipmentTrackingNumber} defaultValue={order.shipmentTrackingNumber}/>\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Is Gift?</h4></td>\n// \t\t\t\t\t\t\t\t{order.isGift && <td><input type=\"checkbox\" onChange={handleInputChange} value={inputs.isGift} name=\"isGift\" checked/></td>}\n// \t\t\t\t\t\t\t\t{!order.isGift && <td><input type=\"checkbox\" onChange={handleInputChange} value={inputs.isGift} name=\"isGift\"/></td>}\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t{order.isGift && order.giftMessage !== '' && <td><h4 style={{fontWeight: 'bold'}}>Gift Message</h4></td>}\n// \t\t\t\t\t\t\t\t{order.isGift && order.giftMessage !== '' && <td><input type=\"text\" name=\"giftMessage\" onChange={handleInputChange} value={inputs.giftMessage} defaultValue={order.giftMessage}/></td>}\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t</table>\n// \t\t\t\t\t</div>\n// \t\t\t\t</div>\n\n// \t\t\t\t<div id='OrderView_Products_Details'>\n// \t\t\t\t\t<h4 style={{fontWeight: 'bold'}}>Flavor Information</h4>\n// \t\t\t\t\t<div className='Row'>\n// \t\t\t\t\t\t<table>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<th><h4 style={{fontWeight: 'bold'}}>Name</h4></th>\n// \t\t\t\t\t\t\t\t<th><h4 style={{fontWeight: 'bold'}}>SKU</h4></th>\n// \t\t\t\t\t\t\t\t<th><h4 style={{fontWeight: 'bold'}}>Quantity</h4></th>\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t{order.productsOrdered.map((product) => (\n// \t\t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t\t<td><h4>{product.product.name}</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><h4>{product.product.id}</h4></td>\n// \t\t\t\t\t\t\t\t\t<td><h4>{product.quantity}</h4></td>\n// \t\t\t\t\t\t\t\t</tr>\t\t\t\t\t\n// \t\t\t\t\t\t\t))}\n// \t\t\t\t\t\t</table>\n// \t\t\t\t\t\t<table>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<th><h4 style={{fontWeight: 'bold'}}>At a Glance:</h4></th>\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Total Number of Logs:</h4></td>\n// \t\t\t\t\t\t\t\t<td><h4>{numberOfLogs}</h4></td>\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t\t<tr>\n// \t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Total Number of Flavors:</h4></td>\n// \t\t\t\t\t\t\t\t<td><h4>{numberOfFlavors}</h4></td>\n// \t\t\t\t\t\t\t</tr>\n// \t\t\t\t\t\t</table>\n// \t\t\t\t\t</div>\n// \t\t\t\t</div>\n// \t\t\t</div>\n// \t\t</form>\n// \t)\n// }\n\n// // this will be used to dispatch actions\n// // import { useSelector, useDispatch } from 'react-redux';\n\n/**\n * This is the view of a singular order. \n * @param order \n * @returns This returns the view of a singular existing order \n */\n const OrderViewOnly = ({order}) => {\n\t\n\tconsole.log(order)\n\t// let recipient\n\t// if(order.isGift){\n\t// \trecipient = order.giftFor\n\n\t// } else{\n\t// \t// recipient = order.customer.firstName + ' ' + order.customer.lastName \n\t// }\n\n\t// var numberOfFlavors = 0\n\t// order.productsOrdered.forEach(product => numberOfFlavors+=1)\n\n\t// var numberOfLogs = 0\n\t// order.productsOrdered.forEach(product => numberOfLogs+= product.quantity)\n\n\treturn (\n\t\t<div id='OrderView'>\n\t\t\t<div id='OrderView_Header'>\n\t\t\t\t{/* on click EDIT, we change to edit view */}\n\t\t\t\t<button className='OrderActionButton' onClick={()=> <OrderViewOnly/>}>\n\t\t\t\t\t<img src={edit_icon} alt='add order' style={{paddingRight: '10px'}}/>\n\t\t\t\t\t<h4>Edit Order</h4>\n\t\t\t\t</button>\n\t\t\t\t{/* on click DELETE, we dispatch delete call with ID*/}\n\t\t\t\t<button className='OrderActionButton' onClick={deleteOrder}>\n\t\t\t\t\t<img src={delete_icon} alt='add order' style={{paddingRight: '10px'}}/>\n\t\t\t\t\t<h4>Delete Order</h4>\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<div className='Row'>\n\t\t\t\t<div className='Column'>\n\t\t\t\t\t{/* <div id='OrderView_General_Details'>\n\t\t\t\t\t\t<table>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Reference #</h4></td>\n\t\t\t\t\t\t\t\t<td><h4>{order.referenceNumber}</h4></td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Invoice #</h4></td>\n\t\t\t\t\t\t\t\t<td><h4>{order.invoiceNumber}</h4></td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Date Placed</h4></td>\n\t\t\t\t\t\t\t\t<td><h4>{order.datePlaced}</h4></td>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</table>\n\t\t\t\t\t</div> */}\n\t\t\t\t\t<CustomerInfo customerId={order.customerId}/>\n\t\t\t\t\t<GiftInfo order={order}/>\n\t\t\t\t\t<ShippingInfo shippingId={order.shippingId}/>\n\t\t\t\t\t<InvoiceDetails orderID={order.orderID}/>\n\n\n\n\t\t\t\t</div>\n\n\t\t\t\t{/* <div id='OrderView_Shipping_Details'>\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Recipient</h4></td>\n\t\t\t\t\t\t\t<td><h4>{recipient}</h4></td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Address</h4></td>\n\t\t\t\t\t\t\t<td>\n\t\t\t\t\t\t\t\t<h4>{order.shippingAddress.streetAddress}<br></br>{order.shippingAddress.city}, {order.shippingAddress.state}<br></br>{order.shippingAddress.zipCode}</h4>\n\t\t\t\t\t\t\t</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Tracking #</h4></td>\n\t\t\t\t\t\t\t<td><h4>{order.shipmentTrackingNumber}</h4></td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t{order.isGift && order.giftMessage !== '' && <td><h4 style={{fontWeight: 'bold'}}>Gift Message</h4></td>}\n\t\t\t\t\t\t\t{order.isGift && order.giftMessage !== '' && <td><h4>{order.giftMessage}</h4></td>}\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</table>\n\t\t\t\t</div> */}\n\t\t\t</div>\n\n\t\t\t{/* <div id='OrderView_Products_Details'>\n\t\t\t\t<h4 style={{fontWeight: 'bold'}}>Flavor Information</h4>\n\t\t\t\t<div className='Row'>\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th><h4 style={{fontWeight: 'bold'}}>Name</h4></th>\n\t\t\t\t\t\t\t<th><h4 style={{fontWeight: 'bold'}}>SKU</h4></th>\n\t\t\t\t\t\t\t<th><h4 style={{fontWeight: 'bold'}}>Quantity</h4></th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t{order.productsOrdered.map((product) => (\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td><h4>{product.product.name}</h4></td>\n\t\t\t\t\t\t\t\t<td><h4>{product.product.id}</h4></td>\n\t\t\t\t\t\t\t\t<td><h4>{product.quantity}</h4></td>\n\t\t\t\t\t\t\t</tr>\t\t\t\t\t\n\t\t\t\t\t\t))}\n\t\t\t\t\t</table>\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<th><h4 style={{fontWeight: 'bold'}}>At a Glance:</h4></th>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Total Number of Logs:</h4></td>\n\t\t\t\t\t\t\t<td><h4>{numberOfLogs}</h4></td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td><h4 style={{fontWeight: 'bold'}}>Total Number of Flavors:</h4></td>\n\t\t\t\t\t\t\t<td><h4>{numberOfFlavors}</h4></td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t</table>\n\t\t\t\t</div>\n\t\t\t</div> */}\n\t\t</div>\n\t)\n}\n\nclass ExistingOrder extends Component {\n\tconstructor(props) {\n\t  super(props);\n\n\t}\n\n\tupdateOrder() {\n\n\t}\n  \n\t// This gets the users when the component loads\n\tcomponentDidMount() {\n\t//   this.props.retrieveOrder();\n\t//   this.props.retrieveCustomer();\n\t//   this.props.retrieveInvoice();\n\t//   this.props.retrieveOrderLines();\n\t}\n\n  \n\trender() {\n\n\t\tconst {order} = this.props;\n\t\treturn (\n\t\t\t<OrderViewOnly order={this.props.order}/>\n\t\t);\n\t}\n  }\n  \n\n  // Mapping only the parts of the redux store that we want to work with on this component\n  const mapStateToProps = (state) => {\n\n\treturn {\n\t  customers: state.customers,\n\t  orderline: state.orderline,\n\t  invoices: state.invoices,\n\t  shippingAddresses: state.shippingAddresses,\n\n\n\t};\n  };\n  \nexport default connect(mapStateToProps, { retrieveOrder, retrieveCustomer, retrieveOrderLines, retrieveInvoice })(ExistingOrder);\n\n"],"mappings":";;;;;;;;;;;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,OAAO,EAAEC,WAAW,EAAEC,WAAW,QAAQ,aAAa;AAE/D,SAASC,WAAW,EAAEC,WAAW,EAAEC,aAAa,QAAQ,yBAAyB;AACjF,SAASC,gBAAgB,QAAQ,4BAA4B;AAC7D,SAASC,eAAe,QAAQ,2BAA2B;AAC3D,SAASC,uBAAuB,QAAQ,2BAA2B;AACnE,SAASC,kBAAkB,QAAQ,6BAA6B;AAChE,OAAOC,YAAY,MAAM,wCAAwC;AACjE,OAAOC,cAAc,MAAM,uCAAuC;AAClE,OAAOC,QAAQ,MAAM,oCAAoC;AAIzD,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAK,EAAK;EAE/B,IAAMC,QAAQ,GAAGd,WAAW,EAAE;EAAC,gBACDH,QAAQ,CAACgB,KAAK,CAAC;IAAA;IAApCE,MAAM;IAAEC,SAAS;EACxB;EAEF,IAAMC,YAAY,GAAGhB,WAAW,CAAC,UAACiB,KAAK;IAAA,OAAKA,KAAK,CAACC,MAAM,CAACC,MAAM;EAAA,EAAC;EAG9D,IAAMC,YAAY,GAAG,SAAfA,YAAY,CAAIC,KAAK,EAAK;IAC/B,IAAGA,KAAK,EAAE;MACTA,KAAK,CAACC,cAAc,EAAE;MACtBT,QAAQ,EACV;IACC;EACD,CAAC;EACD,IAAMU,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIF,KAAK,EAAK;IACpCA,KAAK,CAACG,OAAO,EAAE;IACfT,SAAS,CAAC,UAAAD,MAAM;MAAA,yBAASA,MAAM,sBAAGO,KAAK,CAACI,MAAM,CAACC,IAAI,EAAGL,KAAK,CAACI,MAAM,CAACE,KAAK;IAAA,CAAE,CAAC;EAC5E,CAAC;EACD,OAAO;IACNP,YAAY,EAAZA,YAAY;IACZG,iBAAiB,EAAjBA,iBAAiB;IACjBT,MAAM,EAANA;EACD,CAAC;AACF,CAAC;;AAEH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACC,IAAMc,aAAa,GAAG,SAAhBA,aAAa,OAAgB;EAAA,IAAXhB,KAAK,QAALA,KAAK;EAE7BiB,OAAO,CAACC,GAAG,CAAClB,KAAK,CAAC;EAClB;EACA;EACA;;EAEA;EACA;EACA;;EAEA;EACA;;EAEA;EACA;;EAEA,oBACC;IAAK,EAAE,EAAC,WAAW;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAClB;IAAK,EAAE,EAAC,kBAAkB;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAEzB;IAAQ,SAAS,EAAC,mBAAmB;IAAC,OAAO,EAAE;MAAA,oBAAK,oBAAC,aAAa;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAE;IAAA,CAAC;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACpE;IAAK,GAAG,EAAEmB,SAAU;IAAC,GAAG,EAAC,WAAW;IAAC,KAAK,EAAE;MAACC,YAAY,EAAE;IAAM,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAE,eACrE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAI,YAAU,CAAK,CACX,eAET;IAAQ,SAAS,EAAC,mBAAmB;IAAC,OAAO,EAAE9B,WAAY;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAC1D;IAAK,GAAG,EAAE+B,WAAY;IAAC,GAAG,EAAC,WAAW;IAAC,KAAK,EAAE;MAACD,YAAY,EAAE;IAAM,CAAE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAE,eACvE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,GAAI,cAAY,CAAK,CACb,CACJ,eACN;IAAK,SAAS,EAAC,KAAK;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBACnB;IAAK,SAAS,EAAC,QAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAiBtB,oBAAC,YAAY;IAAC,UAAU,EAAEpB,KAAK,CAACsB,UAAW;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAE,eAC7C,oBAAC,QAAQ;IAAC,KAAK,EAAEtB,KAAM;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAE,eACzB,oBAAC,YAAY;IAAC,UAAU,EAAEA,KAAK,CAACuB,UAAW;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAE,eAC7C,oBAAC,cAAc;IAAC,OAAO,EAAEvB,KAAK,CAACwB,OAAQ;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAAE,CAIpC,CAwBD,CAkCD;AAER,CAAC;AAAA,IAEKC,aAAa;EAAA;EAClB,uBAAYC,KAAK,EAAE;IAAA;IAAA,kFACXA,KAAK;EAEb;EAAC;IAAA;IAAA,8BAEa,CAEd,CAAC,CAED;EAAA;IAAA;IAAA,oCACoB;MACpB;MACA;MACA;MACA;IAAA;EACC;IAAA;IAAA,yBAGQ;MAAA,IAED1B,KAAK,GAAI,IAAI,CAAC0B,KAAK,CAAnB1B,KAAK;MACZ,oBACC,oBAAC,aAAa;QAAC,KAAK,EAAE,IAAI,CAAC0B,KAAK,CAAC1B,KAAM;QAAA;QAAA;UAAA;UAAA;UAAA;QAAA;MAAA,EAAE;IAE3C;EAAC;EAAA;AAAA,EAzB0Bf,SAAS,GA6BnC;AACA,IAAM0C,eAAe,GAAG,SAAlBA,eAAe,CAAItB,KAAK,EAAK;EAEpC,OAAO;IACLuB,SAAS,EAAEvB,KAAK,CAACuB,SAAS;IAC1BC,SAAS,EAAExB,KAAK,CAACwB,SAAS;IAC1BC,QAAQ,EAAEzB,KAAK,CAACyB,QAAQ;IACxBC,iBAAiB,EAAE1B,KAAK,CAAC0B;EAG3B,CAAC;AACA,CAAC;AAEH,eAAe7C,OAAO,CAACyC,eAAe,EAAE;EAAEpC,aAAa,EAAbA,aAAa;EAAEC,gBAAgB,EAAhBA,gBAAgB;EAAEG,kBAAkB,EAAlBA,kBAAkB;EAAEF,eAAe,EAAfA;AAAgB,CAAC,CAAC,CAACgC,aAAa,CAAC"},"metadata":{},"sourceType":"module"}