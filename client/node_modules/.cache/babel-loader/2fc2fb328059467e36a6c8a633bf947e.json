{"ast":null,"code":"// import cross_red from '../../assets/img/close_red.svg'\n// import cross_white from '../../assets/img/close_white.svg'\n// import React, { useState } from 'react'\n// import { useSelector } from 'react-redux';\n\n// import {\n// \tretrieveOrders\n// } from '../../store/order_slice'\n// import { render } from 'react-dom';\n\n// export const TabType = {\n// \tACTIVE: 1,\n// \tINACTIVE: 2,\n// }\n\n// const TabButton = ({id, text, tabType, viewType, onClick, onDelete}) => {\n// \tif(tabType === TabType.ACTIVE){\n// \t\treturn(\n// \t\t\t<div className='tabRowButtonActive' onClick={() => onClick(id)}>\n// \t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\n// \t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_white} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\n// \t\t\t</div>\n// \t\t)\n// \t} else if(tabType === TabType.INACTIVE){\n// \t\treturn(\n// \t\t\t<div className='tabRowButton' onClick={() => onClick(id)}>\n// \t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\n// \t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_red} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\n// \t\t\t</div>\n// \t\t)\n// \t}\n// }\n\n// const InvoiceCard = ({order, color, onClick}) => {\n// \tvar numberOfLogs = 0\n// \torder.productsOrdered.forEach(product => numberOfLogs+= product.quantity)\n\n// \treturn(\n// \t\t<div className='OrderCard' onClick={() => onClick(order)}>\n// \t\t\t<div className='OrderCardHeader' style={{backgroundColor: color}}>\n// \t\t\t\t<h4 style={{fontWeight: 'bold'}}>{order.customer.lastName}, {order.customer.firstName}</h4>\n// \t\t\t</div>\n// \t\t\t<div className='OrderCardContent'>\n// \t\t\t\t<h4>Reference: {order.referenceNumber}</h4>\n// \t\t\t\t<h4>Invoice: {(order.invoiceNumber === undefined) ? 'NA' : order.invoiceNumber}</h4>\n// \t\t\t\t<h4>Logs Ordered: {numberOfLogs}</h4>\n// \t\t\t</div>\n// \t\t</div>\n// \t)\n// }\n\n// const InvoiceDisplayColumn = ({title, orders, cardOnClick}) => {\n// \treturn(\n// \t\t<ul className='OrderDisplayColumn'>\n// \t\t\t<li key={title} style={{position: 'sticky', top: '0px'}}><div className='OrderDisplayColumnTitle'><h3 style={{padding: '0px', margin: '0px'}}>{title}</h3></div></li>\n\n// \t\t\t{orders.map((order) => (\n// \t\t\t\t<li><InvoiceCard key={order.referenceNumber} order={order} color='#90E0C9' onClick={cardOnClick} /></li>\n// \t\t\t))}\n// \t\t</ul>\n// \t);\t\n// }\n\n// // the only difference bt orders and invoices\n// const ActiveInvoices = ({orders, cardOnClick}) => {\n// \treturn (\n// \t\t<div id='OrderDisplayColumns'>\n// \t\t\t<InvoiceDisplayColumn title='Missing' orders={orders.filter(order => order.invoice === undefined)} cardOnClick={cardOnClick} />\n// \t\t\t<InvoiceDisplayColumn title='Unpaid' orders={orders.filter(order => order.invoice !== undefined && !order.invoice.isPaid)} cardOnClick={cardOnClick} />\n// \t\t\t<InvoiceDisplayColumn title='Paid' orders={orders.filter(order => order.invoice !== undefined && order.invoice.isPaid)} cardOnClick={cardOnClick} />\n// \t\t</div>\n// \t)\n// }\n\n// const CompletedInvoices = ({orders, cardOnClick}) => {\n// \treturn (\n// \t\t<div id='OrdersDisplayColumns' style={{display: 'flex', displayDirection: 'column'}}>\n// \t\t\t<InvoiceDisplayColumn title='Completed' orders={orders} cardOnClick={cardOnClick} />\n// \t\t</div>\n// \t)\n// }\n\n// const InvoiceView = ({order}) => {\n// \tlet recipient\n// \tif(order.isGift){\n// \t\trecipient = order.giftFor\n\n// \t} else{\n// \t\trecipient = order.customer.firstName + ' ' + order.customer.lastName \n// \t}\n\n// \tvar numberOfLogs = 0\n// \torder.productsOrdered.forEach(product => numberOfLogs++)\n\n// \treturn (\n// \t\tnull\n// \t)\n// }\n\n// const ViewType = {\n// \tACTIVE_INVOICES: 1,\n// \tCOMPLETED_INVOICES: 2,\n// \tORDER_VIEW: 3,\n// }\n\n// const Invoices = () => {\n// \tvar orders = retrieveOrders\n// \tconst [displayText, setDisplayText] = useState(\"Invoices\")\n// \tconst [nextId, setNextId] = useState(3)\n// \tconst [activeTabId, setActiveTabId] = useState(1)\n// \tconst [tabs, setTabs] = useState([\n// \t\t{\n// \t\t\tid: 1,\n// \t\t\ttext: 'Active Invoices',\n// \t\t\ttabType: TabType.ACTIVE,\n// \t\t\tviewType: ViewType.ACTIVE_INVOICES,\n// \t\t},\n// \t\t{\n// \t\t\tid: 2,\n// \t\t\ttext: 'Completed Invoices',\n// \t\t\ttabType: TabType.INACTIVE,\n// \t\t\tviewType: ViewType.COMPLETED_INVOICES,\n// \t\t},\n\n// \t])\n\n// \tfunction addAndOpenInvoiceView(order){\n// \t\tconst tab = tabs.find(tab => (tab.viewType === ViewType.INVOICE_VIEW && order.referenceNumber === tab.order.referenceNumber))\n// \t\tif(tab === undefined){\n// \t\t\tconst newTab = {\n// \t\t\t\tid: {nextId},\n// \t\t\t\ttext: order.referenceNumber,\n// \t\t\t\ttabType: TabType.ACTIVE,\n// \t\t\t\tviewType: ViewType.INVOICE_VIEW,\n// \t\t\t\torder: order,\n// \t\t\t}\n\n// \t\t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n// \t\t\tcurrentActiveTab.tabType = TabType.INACTIVE\n// \t\t\tconst newTabsList = tabs.slice()\n// \t\t\tsetTabs([...newTabsList, newTab])\n// \t\t\tsetActiveTabId(newTab.id)\n// \t\t\tsetNextId(nextId + 1)\n\n// \t\t} else{\n// \t\t\tsetActiveTab(tab.id)\n// \t\t}\n\n// \t}\n\n// \tfunction removeOrderView(id, event){\n// \t\tif(activeTabId === id){\n// \t\t\tconst newActiveTab = tabs[tabs.length-2]\n// \t\t\tnewActiveTab.tabType = TabType.ACTIVE\n// \t\t\tconst newTabsList = tabs.slice().filter(tab => tab.id !== id)\n// \t\t\tsetTabs(newTabsList)\n// \t\t\tsetActiveTabId(newActiveTab.id)\n\n// \t\t} else{\n// \t\t\tsetTabs(tabs.filter(tab => tab.id !== id))\n// \t\t}\n\n// \t\t{/*So that the tab does not click when the close button is clicked*/}\n// \t\tevent.stopPropagation()\n// \t}\n\n// \tfunction setActiveTab(id){\n// \t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\n// \t\tconst newActiveTab = tabs.find(tab => tab.id === id)\n// \t\tcurrentActiveTab.tabType = TabType.INACTIVE\n// \t\tnewActiveTab.tabType = TabType.ACTIVE\n// \t\tconst newTabsList = tabs.slice()\n// \t\tsetTabs(newTabsList)\n// \t\tsetActiveTabId(newActiveTab.id)\n// \t}\n\n// \tlet displayContent\n// \tconst activeContent = tabs.find(tab => tab.id === activeTabId)\n\n// \tswitch(activeContent.viewType){\n// \t\tcase ViewType.ACTIVE_INVOICES:\n// \t\t\tdisplayContent = <ActiveInvoices orders={orders.filter(order => (order.status === 'PLACED' || order.status === 'PROCESSED' || order.status === 'SHIPPED'))} cardOnClick={addAndOpenInvoiceView} />\n// \t\t\tbreak\n// \t\tcase ViewType.COMPLETED_INVOICES:\n// \t\t\tdisplayContent = <CompletedInvoices orders={orders.filter(order => order.status === 'COMPLETED')} cardOnClick={addAndOpenInvoiceView} />\n// \t\t\tbreak\n// \t\tcase ViewType.ORDER_VIEW:\n// \t\t\tdisplayContent = <InvoiceView order={activeContent.order} />\n// \t\t\tbreak\n// \t}\n\n// \treturn(\n// \t\t<div id='Orders'>\t\n// \t\t\t<h1>{displayText}</h1>\n// \t\t\t<div id='OrdersDisplay' style={{display: 'flex', displayDirection: 'column'}}>\n// \t\t\t\t<div className='tabRow'>\n// \t\t\t\t\t{tabs.map((tab) => (\n// \t\t\t\t\t\t<TabButton key={tab.id} id={tab.id} text={tab.text} tabType={tab.tabType} viewType={tab.viewType} onClick={setActiveTab} onDelete={removeOrderView}/>\n// \t\t\t\t\t))}\n// \t\t\t\t</div>\n// \t\t\t\t<div id='rectangle' style={{height: '13px', width: '1144px', backgroundColor: '#C62032'}} />\n// \t\t\t\t{displayContent}\n// \t\t\t</div>\n// \t\t</div>\n// \t)\n// }\n\n// export default Invoices;","map":{"version":3,"names":[],"sources":["/Users/gabrielleacquista/Documents/GitHub/GGCPortal/frontend_goats_portal/src/views/invoices/Invoices.js"],"sourcesContent":["// import cross_red from '../../assets/img/close_red.svg'\r\n// import cross_white from '../../assets/img/close_white.svg'\r\n// import React, { useState } from 'react'\r\n// import { useSelector } from 'react-redux';\r\n\r\n// import {\r\n// \tretrieveOrders\r\n// } from '../../store/order_slice'\r\n// import { render } from 'react-dom';\r\n\r\n// export const TabType = {\r\n// \tACTIVE: 1,\r\n// \tINACTIVE: 2,\r\n// }\r\n\r\n// const TabButton = ({id, text, tabType, viewType, onClick, onDelete}) => {\r\n// \tif(tabType === TabType.ACTIVE){\r\n// \t\treturn(\r\n// \t\t\t<div className='tabRowButtonActive' onClick={() => onClick(id)}>\r\n// \t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\r\n// \t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_white} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\r\n// \t\t\t</div>\r\n// \t\t)\r\n// \t} else if(tabType === TabType.INACTIVE){\r\n// \t\treturn(\r\n// \t\t\t<div className='tabRowButton' onClick={() => onClick(id)}>\r\n// \t\t\t\t<h3 style={{fontWeight: 'bold'}}>{text}</h3>\r\n// \t\t\t\t{viewType === ViewType.ORDER_VIEW && <img src={cross_red} style={{paddingLeft: '10px'}} onClick={(event) => onDelete(id, event)}/> }\r\n// \t\t\t</div>\r\n// \t\t)\r\n// \t}\r\n// }\r\n\r\n// const InvoiceCard = ({order, color, onClick}) => {\r\n// \tvar numberOfLogs = 0\r\n// \torder.productsOrdered.forEach(product => numberOfLogs+= product.quantity)\r\n\r\n// \treturn(\r\n// \t\t<div className='OrderCard' onClick={() => onClick(order)}>\r\n// \t\t\t<div className='OrderCardHeader' style={{backgroundColor: color}}>\r\n// \t\t\t\t<h4 style={{fontWeight: 'bold'}}>{order.customer.lastName}, {order.customer.firstName}</h4>\r\n// \t\t\t</div>\r\n// \t\t\t<div className='OrderCardContent'>\r\n// \t\t\t\t<h4>Reference: {order.referenceNumber}</h4>\r\n// \t\t\t\t<h4>Invoice: {(order.invoiceNumber === undefined) ? 'NA' : order.invoiceNumber}</h4>\r\n// \t\t\t\t<h4>Logs Ordered: {numberOfLogs}</h4>\r\n// \t\t\t</div>\r\n// \t\t</div>\r\n// \t)\r\n// }\r\n\r\n// const InvoiceDisplayColumn = ({title, orders, cardOnClick}) => {\r\n// \treturn(\r\n// \t\t<ul className='OrderDisplayColumn'>\r\n// \t\t\t<li key={title} style={{position: 'sticky', top: '0px'}}><div className='OrderDisplayColumnTitle'><h3 style={{padding: '0px', margin: '0px'}}>{title}</h3></div></li>\r\n\r\n// \t\t\t{orders.map((order) => (\r\n// \t\t\t\t<li><InvoiceCard key={order.referenceNumber} order={order} color='#90E0C9' onClick={cardOnClick} /></li>\r\n// \t\t\t))}\r\n// \t\t</ul>\r\n// \t);\t\r\n// }\r\n\r\n// // the only difference bt orders and invoices\r\n// const ActiveInvoices = ({orders, cardOnClick}) => {\r\n// \treturn (\r\n// \t\t<div id='OrderDisplayColumns'>\r\n// \t\t\t<InvoiceDisplayColumn title='Missing' orders={orders.filter(order => order.invoice === undefined)} cardOnClick={cardOnClick} />\r\n// \t\t\t<InvoiceDisplayColumn title='Unpaid' orders={orders.filter(order => order.invoice !== undefined && !order.invoice.isPaid)} cardOnClick={cardOnClick} />\r\n// \t\t\t<InvoiceDisplayColumn title='Paid' orders={orders.filter(order => order.invoice !== undefined && order.invoice.isPaid)} cardOnClick={cardOnClick} />\r\n// \t\t</div>\r\n// \t)\r\n// }\r\n\r\n// const CompletedInvoices = ({orders, cardOnClick}) => {\r\n// \treturn (\r\n// \t\t<div id='OrdersDisplayColumns' style={{display: 'flex', displayDirection: 'column'}}>\r\n// \t\t\t<InvoiceDisplayColumn title='Completed' orders={orders} cardOnClick={cardOnClick} />\r\n// \t\t</div>\r\n// \t)\r\n// }\r\n\r\n// const InvoiceView = ({order}) => {\r\n// \tlet recipient\r\n// \tif(order.isGift){\r\n// \t\trecipient = order.giftFor\r\n\r\n// \t} else{\r\n// \t\trecipient = order.customer.firstName + ' ' + order.customer.lastName \r\n// \t}\r\n\r\n// \tvar numberOfLogs = 0\r\n// \torder.productsOrdered.forEach(product => numberOfLogs++)\r\n\r\n// \treturn (\r\n// \t\tnull\r\n// \t)\r\n// }\r\n\r\n// const ViewType = {\r\n// \tACTIVE_INVOICES: 1,\r\n// \tCOMPLETED_INVOICES: 2,\r\n// \tORDER_VIEW: 3,\r\n// }\r\n\r\n// const Invoices = () => {\r\n// \tvar orders = retrieveOrders\r\n// \tconst [displayText, setDisplayText] = useState(\"Invoices\")\r\n// \tconst [nextId, setNextId] = useState(3)\r\n// \tconst [activeTabId, setActiveTabId] = useState(1)\r\n// \tconst [tabs, setTabs] = useState([\r\n// \t\t{\r\n// \t\t\tid: 1,\r\n// \t\t\ttext: 'Active Invoices',\r\n// \t\t\ttabType: TabType.ACTIVE,\r\n// \t\t\tviewType: ViewType.ACTIVE_INVOICES,\r\n// \t\t},\r\n// \t\t{\r\n// \t\t\tid: 2,\r\n// \t\t\ttext: 'Completed Invoices',\r\n// \t\t\ttabType: TabType.INACTIVE,\r\n// \t\t\tviewType: ViewType.COMPLETED_INVOICES,\r\n// \t\t},\r\n\r\n// \t])\r\n\r\n// \tfunction addAndOpenInvoiceView(order){\r\n// \t\tconst tab = tabs.find(tab => (tab.viewType === ViewType.INVOICE_VIEW && order.referenceNumber === tab.order.referenceNumber))\r\n// \t\tif(tab === undefined){\r\n// \t\t\tconst newTab = {\r\n// \t\t\t\tid: {nextId},\r\n// \t\t\t\ttext: order.referenceNumber,\r\n// \t\t\t\ttabType: TabType.ACTIVE,\r\n// \t\t\t\tviewType: ViewType.INVOICE_VIEW,\r\n// \t\t\t\torder: order,\r\n// \t\t\t}\r\n\r\n// \t\t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\r\n// \t\t\tcurrentActiveTab.tabType = TabType.INACTIVE\r\n// \t\t\tconst newTabsList = tabs.slice()\r\n// \t\t\tsetTabs([...newTabsList, newTab])\r\n// \t\t\tsetActiveTabId(newTab.id)\r\n// \t\t\tsetNextId(nextId + 1)\r\n\r\n// \t\t} else{\r\n// \t\t\tsetActiveTab(tab.id)\r\n// \t\t}\r\n\t\t\r\n// \t}\r\n\r\n// \tfunction removeOrderView(id, event){\r\n// \t\tif(activeTabId === id){\r\n// \t\t\tconst newActiveTab = tabs[tabs.length-2]\r\n// \t\t\tnewActiveTab.tabType = TabType.ACTIVE\r\n// \t\t\tconst newTabsList = tabs.slice().filter(tab => tab.id !== id)\r\n// \t\t\tsetTabs(newTabsList)\r\n// \t\t\tsetActiveTabId(newActiveTab.id)\r\n\r\n// \t\t} else{\r\n// \t\t\tsetTabs(tabs.filter(tab => tab.id !== id))\r\n// \t\t}\r\n\r\n// \t\t{/*So that the tab does not click when the close button is clicked*/}\r\n// \t\tevent.stopPropagation()\r\n// \t}\r\n\r\n// \tfunction setActiveTab(id){\r\n// \t\tconst currentActiveTab = tabs.find(tab => tab.id === activeTabId)\r\n// \t\tconst newActiveTab = tabs.find(tab => tab.id === id)\r\n// \t\tcurrentActiveTab.tabType = TabType.INACTIVE\r\n// \t\tnewActiveTab.tabType = TabType.ACTIVE\r\n// \t\tconst newTabsList = tabs.slice()\r\n// \t\tsetTabs(newTabsList)\r\n// \t\tsetActiveTabId(newActiveTab.id)\r\n// \t}\r\n\r\n// \tlet displayContent\r\n// \tconst activeContent = tabs.find(tab => tab.id === activeTabId)\r\n\r\n// \tswitch(activeContent.viewType){\r\n// \t\tcase ViewType.ACTIVE_INVOICES:\r\n// \t\t\tdisplayContent = <ActiveInvoices orders={orders.filter(order => (order.status === 'PLACED' || order.status === 'PROCESSED' || order.status === 'SHIPPED'))} cardOnClick={addAndOpenInvoiceView} />\r\n// \t\t\tbreak\r\n// \t\tcase ViewType.COMPLETED_INVOICES:\r\n// \t\t\tdisplayContent = <CompletedInvoices orders={orders.filter(order => order.status === 'COMPLETED')} cardOnClick={addAndOpenInvoiceView} />\r\n// \t\t\tbreak\r\n// \t\tcase ViewType.ORDER_VIEW:\r\n// \t\t\tdisplayContent = <InvoiceView order={activeContent.order} />\r\n// \t\t\tbreak\r\n// \t}\r\n\r\n\r\n// \treturn(\r\n// \t\t<div id='Orders'>\t\r\n// \t\t\t<h1>{displayText}</h1>\r\n// \t\t\t<div id='OrdersDisplay' style={{display: 'flex', displayDirection: 'column'}}>\r\n// \t\t\t\t<div className='tabRow'>\r\n// \t\t\t\t\t{tabs.map((tab) => (\r\n// \t\t\t\t\t\t<TabButton key={tab.id} id={tab.id} text={tab.text} tabType={tab.tabType} viewType={tab.viewType} onClick={setActiveTab} onDelete={removeOrderView}/>\r\n// \t\t\t\t\t))}\r\n// \t\t\t\t</div>\r\n// \t\t\t\t<div id='rectangle' style={{height: '13px', width: '1144px', backgroundColor: '#C62032'}} />\r\n// \t\t\t\t{displayContent}\r\n// \t\t\t</div>\r\n// \t\t</div>\r\n// \t)\r\n// }\r\n\r\n// export default Invoices;"],"mappings},"metadata":{},"sourceType":"module"}